
P5_I2C1_BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800454c  0800454c  0000554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004614  08004614  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004614  08004614  00005614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800461c  0800461c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800461c  0800461c  0000561c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004620  08004620  00005620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004624  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000068  0800468c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  0800468c  00006274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b82a  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e71  00000000  00000000  000118c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00013738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fa  00000000  00000000  00014190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001706a  00000000  00000000  0001498a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e12a  00000000  00000000  0002b9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895af  00000000  00000000  00039b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c30cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003158  00000000  00000000  000c3110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c6268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004534 	.word	0x08004534

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004534 	.word	0x08004534

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <rd>:

#define HAL_ADDR(a7)   ((uint16_t)((a7) << 1))

static HAL_StatusTypeDef rd(I2C_HandleTypeDef *hi2c, uint16_t a8,
                            uint8_t reg, uint8_t *buf, uint16_t n)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af04      	add	r7, sp, #16
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	460b      	mov	r3, r1
 80005b8:	817b      	strh	r3, [r7, #10]
 80005ba:	4613      	mov	r3, r2
 80005bc:	727b      	strb	r3, [r7, #9]
    return HAL_I2C_Mem_Read(hi2c, a8, reg, I2C_MEMADD_SIZE_8BIT, buf, n, HAL_MAX_DELAY);
 80005be:	7a7b      	ldrb	r3, [r7, #9]
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	8979      	ldrh	r1, [r7, #10]
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	9302      	str	r3, [sp, #8]
 80005ca:	8b3b      	ldrh	r3, [r7, #24]
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	68f8      	ldr	r0, [r7, #12]
 80005d6:	f001 f997 	bl	8001908 <HAL_I2C_Mem_Read>
 80005da:	4603      	mov	r3, r0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <wr>:

static HAL_StatusTypeDef wr(I2C_HandleTypeDef *hi2c, uint16_t a8,
                            uint8_t reg, uint8_t val)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af04      	add	r7, sp, #16
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	4608      	mov	r0, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	461a      	mov	r2, r3
 80005f2:	4603      	mov	r3, r0
 80005f4:	807b      	strh	r3, [r7, #2]
 80005f6:	460b      	mov	r3, r1
 80005f8:	707b      	strb	r3, [r7, #1]
 80005fa:	4613      	mov	r3, r2
 80005fc:	703b      	strb	r3, [r7, #0]
    return HAL_I2C_Mem_Write(hi2c, a8, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, HAL_MAX_DELAY);
 80005fe:	787b      	ldrb	r3, [r7, #1]
 8000600:	b29a      	uxth	r2, r3
 8000602:	8879      	ldrh	r1, [r7, #2]
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	9302      	str	r3, [sp, #8]
 800060a:	2301      	movs	r3, #1
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	463b      	mov	r3, r7
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2301      	movs	r3, #1
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f001 f87d 	bl	8001714 <HAL_I2C_Mem_Write>
 800061a:	4603      	mov	r3, r0
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <u20_from_3bytes>:

static uint32_t u20_from_3bytes(uint8_t b[3]) {
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
    // 20-bit value packed as MSB, LSB, XLSB[7:4]
    return ((uint32_t)b[0] << 12) | ((uint32_t)b[1] << 4) | ((uint32_t)b[2] >> 4);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	031a      	lsls	r2, r3, #12
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3301      	adds	r3, #1
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	4313      	orrs	r3, r2
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	3202      	adds	r2, #2
 8000640:	7812      	ldrb	r2, [r2, #0]
 8000642:	0912      	lsrs	r2, r2, #4
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	4313      	orrs	r3, r2
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <try_addr>:

static HAL_StatusTypeDef try_addr(BMP280 *s, uint8_t addr7)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af02      	add	r7, sp, #8
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	70fb      	strb	r3, [r7, #3]
    s->dev_addr8 = HAL_ADDR(addr7);
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	b29b      	uxth	r3, r3
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	b29a      	uxth	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	809a      	strh	r2, [r3, #4]
    uint8_t id = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef st = rd(s->hi2c, s->dev_addr8, BMP280_REG_ID, &id, 1);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	8899      	ldrh	r1, [r3, #4]
 8000678:	f107 030e 	add.w	r3, r7, #14
 800067c:	2201      	movs	r2, #1
 800067e:	9200      	str	r2, [sp, #0]
 8000680:	22d0      	movs	r2, #208	@ 0xd0
 8000682:	f7ff ff93 	bl	80005ac <rd>
 8000686:	4603      	mov	r3, r0
 8000688:	73fb      	strb	r3, [r7, #15]
    if (st == HAL_OK && (id == BMP280_ID_BMP280 || id == BMP280_ID_BME280)) {
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10a      	bne.n	80006a6 <try_addr+0x52>
 8000690:	7bbb      	ldrb	r3, [r7, #14]
 8000692:	2b58      	cmp	r3, #88	@ 0x58
 8000694:	d002      	beq.n	800069c <try_addr+0x48>
 8000696:	7bbb      	ldrb	r3, [r7, #14]
 8000698:	2b60      	cmp	r3, #96	@ 0x60
 800069a:	d104      	bne.n	80006a6 <try_addr+0x52>
        s->chip_id = id;
 800069c:	7bba      	ldrb	r2, [r7, #14]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	719a      	strb	r2, [r3, #6]
        return HAL_OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e000      	b.n	80006a8 <try_addr+0x54>
    }
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <BMP280_Init>:

HAL_StatusTypeDef BMP280_Init(BMP280 *s, I2C_HandleTypeDef *hi2c, uint8_t addr7)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	4613      	mov	r3, r2
 80006bc:	71fb      	strb	r3, [r7, #7]
    s->hi2c = hi2c;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	68ba      	ldr	r2, [r7, #8]
 80006c2:	601a      	str	r2, [r3, #0]
    s->dev_addr8 = 0;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2200      	movs	r2, #0
 80006c8:	809a      	strh	r2, [r3, #4]
    s->chip_id = 0;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2200      	movs	r2, #0
 80006ce:	719a      	strb	r2, [r3, #6]

    if (addr7 == 0) {
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d113      	bne.n	80006fe <BMP280_Init+0x4e>
        if (try_addr(s, BMP280_ADDR7_76) == HAL_OK) return HAL_OK;
 80006d6:	2176      	movs	r1, #118	@ 0x76
 80006d8:	68f8      	ldr	r0, [r7, #12]
 80006da:	f7ff ffbb 	bl	8000654 <try_addr>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d101      	bne.n	80006e8 <BMP280_Init+0x38>
 80006e4:	2300      	movs	r3, #0
 80006e6:	e010      	b.n	800070a <BMP280_Init+0x5a>
        if (try_addr(s, BMP280_ADDR7_77) == HAL_OK) return HAL_OK;
 80006e8:	2177      	movs	r1, #119	@ 0x77
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f7ff ffb2 	bl	8000654 <try_addr>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <BMP280_Init+0x4a>
 80006f6:	2300      	movs	r3, #0
 80006f8:	e007      	b.n	800070a <BMP280_Init+0x5a>
        return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e005      	b.n	800070a <BMP280_Init+0x5a>
    } else {
        return try_addr(s, addr7);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4619      	mov	r1, r3
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f7ff ffa6 	bl	8000654 <try_addr>
 8000708:	4603      	mov	r3, r0
    }
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <BMP280_ConfigureDefault>:

HAL_StatusTypeDef BMP280_ConfigureDefault(BMP280 *s)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
    // ctrl_meas: pressure x1 (001), temperature x1 (001), normal mode (11)
    // 0b0010 0111 = 0x27
    return wr(s->hi2c, s->dev_addr8, BMP280_REG_CTRL_MEAS, 0x27);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	8899      	ldrh	r1, [r3, #4]
 8000722:	2327      	movs	r3, #39	@ 0x27
 8000724:	22f4      	movs	r2, #244	@ 0xf4
 8000726:	f7ff ff5d 	bl	80005e4 <wr>
 800072a:	4603      	mov	r3, r0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <BMP280_ReadRaw>:
{
    return rd(s->hi2c, s->dev_addr8, BMP280_REG_ID, out_id, 1);
}

HAL_StatusTypeDef BMP280_ReadRaw(BMP280 *s, uint32_t *raw_press, uint32_t *raw_temp)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af02      	add	r7, sp, #8
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
    uint8_t p[3], t[3];
    if (rd(s->hi2c, s->dev_addr8, BMP280_REG_PRESS_MSB, p, 3) != HAL_OK) return HAL_ERROR;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	8899      	ldrh	r1, [r3, #4]
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2203      	movs	r2, #3
 800074e:	9200      	str	r2, [sp, #0]
 8000750:	22f7      	movs	r2, #247	@ 0xf7
 8000752:	f7ff ff2b 	bl	80005ac <rd>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <BMP280_ReadRaw+0x2c>
 800075c:	2301      	movs	r3, #1
 800075e:	e026      	b.n	80007ae <BMP280_ReadRaw+0x7a>
    if (rd(s->hi2c, s->dev_addr8, BMP280_REG_TEMP_MSB,  t, 3) != HAL_OK) return HAL_ERROR;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	8899      	ldrh	r1, [r3, #4]
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	2203      	movs	r2, #3
 800076e:	9200      	str	r2, [sp, #0]
 8000770:	22fa      	movs	r2, #250	@ 0xfa
 8000772:	f7ff ff1b 	bl	80005ac <rd>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <BMP280_ReadRaw+0x4c>
 800077c:	2301      	movs	r3, #1
 800077e:	e016      	b.n	80007ae <BMP280_ReadRaw+0x7a>
    if (raw_press)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d007      	beq.n	8000796 <BMP280_ReadRaw+0x62>
    	*raw_press = u20_from_3bytes(p);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff4a 	bl	8000624 <u20_from_3bytes>
 8000790:	4602      	mov	r2, r0
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	601a      	str	r2, [r3, #0]
    if (raw_temp)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d007      	beq.n	80007ac <BMP280_ReadRaw+0x78>
    	*raw_temp  = u20_from_3bytes(t);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff3f 	bl	8000624 <u20_from_3bytes>
 80007a6:	4602      	mov	r2, r0
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000888 <MX_GPIO_Init+0xd0>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a25      	ldr	r2, [pc, #148]	@ (8000888 <MX_GPIO_Init+0xd0>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a1e      	ldr	r2, [pc, #120]	@ (8000888 <MX_GPIO_Init+0xd0>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a17      	ldr	r2, [pc, #92]	@ (8000888 <MX_GPIO_Init+0xd0>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2120      	movs	r1, #32
 8000842:	4812      	ldr	r0, [pc, #72]	@ (800088c <MX_GPIO_Init+0xd4>)
 8000844:	f000 fe08 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000848:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480c      	ldr	r0, [pc, #48]	@ (8000890 <MX_GPIO_Init+0xd8>)
 8000860:	f000 fc76 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000864:	2320      	movs	r3, #32
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4804      	ldr	r0, [pc, #16]	@ (800088c <MX_GPIO_Init+0xd4>)
 800087c:	f000 fc68 	bl	8001150 <HAL_GPIO_Init>

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	@ 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000
 8000890:	40020800 	.word	0x40020800

08000894 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_I2C1_Init+0x50>)
 800089a:	4a13      	ldr	r2, [pc, #76]	@ (80008e8 <MX_I2C1_Init+0x54>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008a0:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <MX_I2C1_Init+0x58>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_I2C1_Init+0x50>)
 80008d2:	f000 fddb 	bl	800148c <HAL_I2C_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f92a 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000084 	.word	0x20000084
 80008e8:	40005400 	.word	0x40005400
 80008ec:	000186a0 	.word	0x000186a0

080008f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a19      	ldr	r2, [pc, #100]	@ (8000974 <HAL_I2C_MspInit+0x84>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d12c      	bne.n	800096c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <HAL_I2C_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <HAL_I2C_MspInit+0x88>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <HAL_I2C_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800092e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000934:	2312      	movs	r3, #18
 8000936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000940:	2304      	movs	r3, #4
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	480c      	ldr	r0, [pc, #48]	@ (800097c <HAL_I2C_MspInit+0x8c>)
 800094c:	f000 fc00 	bl	8001150 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_I2C_MspInit+0x88>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000958:	4a07      	ldr	r2, [pc, #28]	@ (8000978 <HAL_I2C_MspInit+0x88>)
 800095a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800095e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <HAL_I2C_MspInit+0x88>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	@ 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40005400 	.word	0x40005400
 8000978:	40023800 	.word	0x40023800
 800097c:	40020400 	.word	0x40020400

08000980 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *data, int len)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	b29a      	uxth	r2, r3
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
 8000994:	68b9      	ldr	r1, [r7, #8]
 8000996:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <_write+0x28>)
 8000998:	f002 fa84 	bl	8002ea4 <HAL_UART_Transmit>
	return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000dc 	.word	0x200000dc

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b2:	f000 fa51 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b6:	f000 f851 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ba:	f7ff fefd 	bl	80007b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009be:	f000 f9af 	bl	8000d20 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009c2:	f7ff ff67 	bl	8000894 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   BMP280 s;
   if (BMP280_Init(&s, &hi2c1, 0) != HAL_OK) {
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	2200      	movs	r2, #0
 80009cc:	491d      	ldr	r1, [pc, #116]	@ (8000a44 <main+0x98>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe6e 	bl	80006b0 <BMP280_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d007      	beq.n	80009ea <main+0x3e>
	   printf("BMP280 not found at 0x76/0x77\r\n");
 80009da:	481b      	ldr	r0, [pc, #108]	@ (8000a48 <main+0x9c>)
 80009dc:	f002 ff48 	bl	8003870 <puts>
	   while(1)
		   HAL_Delay(500);
 80009e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009e4:	f000 faaa 	bl	8000f3c <HAL_Delay>
 80009e8:	e7fa      	b.n	80009e0 <main+0x34>
   }
   printf("BMP280 found: addr=0x%02X id=0x%02X\r\n", s.dev_addr8 >> 1, s.chip_id);
 80009ea:	89bb      	ldrh	r3, [r7, #12]
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4619      	mov	r1, r3
 80009f2:	7bbb      	ldrb	r3, [r7, #14]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4815      	ldr	r0, [pc, #84]	@ (8000a4c <main+0xa0>)
 80009f8:	f002 fed2 	bl	80037a0 <iprintf>

   if (BMP280_ConfigureDefault(&s) != HAL_OK) {
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fe86 	bl	8000712 <BMP280_ConfigureDefault>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <main+0x66>
	   printf("Configure failed\r\n");
 8000a0c:	4810      	ldr	r0, [pc, #64]	@ (8000a50 <main+0xa4>)
 8000a0e:	f002 ff2f 	bl	8003870 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t up, ut;
	  if (BMP280_ReadRaw(&s, &up, &ut) == HAL_OK) {
 8000a12:	463a      	mov	r2, r7
 8000a14:	1d39      	adds	r1, r7, #4
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fe8a 	bl	8000734 <BMP280_ReadRaw>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d106      	bne.n	8000a34 <main+0x88>
		  printf("RAW P=%lu  T=%lu\r\n", (unsigned long)up, (unsigned long)ut);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4809      	ldr	r0, [pc, #36]	@ (8000a54 <main+0xa8>)
 8000a2e:	f002 feb7 	bl	80037a0 <iprintf>
 8000a32:	e002      	b.n	8000a3a <main+0x8e>
	  } else {
		  printf("Read error\r\n");
 8000a34:	4808      	ldr	r0, [pc, #32]	@ (8000a58 <main+0xac>)
 8000a36:	f002 ff1b 	bl	8003870 <puts>
	  }
	  HAL_Delay(1000);
 8000a3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a3e:	f000 fa7d 	bl	8000f3c <HAL_Delay>
  {
 8000a42:	e7e6      	b.n	8000a12 <main+0x66>
 8000a44:	20000084 	.word	0x20000084
 8000a48:	0800454c 	.word	0x0800454c
 8000a4c:	0800456c 	.word	0x0800456c
 8000a50:	08004594 	.word	0x08004594
 8000a54:	080045a8 	.word	0x080045a8
 8000a58:	080045bc 	.word	0x080045bc

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	@ 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	2230      	movs	r2, #48	@ 0x30
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 ffe0 	bl	8003a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	4b29      	ldr	r3, [pc, #164]	@ (8000b2c <SystemClock_Config+0xd0>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	4a28      	ldr	r2, [pc, #160]	@ (8000b2c <SystemClock_Config+0xd0>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a90:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <SystemClock_Config+0xd0>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <SystemClock_Config+0xd4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aa8:	4a21      	ldr	r2, [pc, #132]	@ (8000b30 <SystemClock_Config+0xd4>)
 8000aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <SystemClock_Config+0xd4>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000abc:	2302      	movs	r3, #2
 8000abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000acc:	2300      	movs	r3, #0
 8000ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ad4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ad8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ada:	2304      	movs	r3, #4
 8000adc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	f107 0320 	add.w	r3, r7, #32
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fcf4 	bl	80024d4 <HAL_RCC_OscConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000af2:	f000 f81f 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af6:	230f      	movs	r3, #15
 8000af8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afa:	2302      	movs	r3, #2
 8000afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2102      	movs	r1, #2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 ff56 	bl	80029c4 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b1e:	f000 f809 	bl	8000b34 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3750      	adds	r7, #80	@ 0x50
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40007000 	.word	0x40007000

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <NMI_Handler+0x4>

08000b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be6:	f000 f989 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	e00a      	b.n	8000c16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c00:	f3af 8000 	nop.w
 8000c04:	4601      	mov	r1, r0
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	1c5a      	adds	r2, r3, #1
 8000c0a:	60ba      	str	r2, [r7, #8]
 8000c0c:	b2ca      	uxtb	r2, r1
 8000c0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	3301      	adds	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	dbf0      	blt.n	8000c00 <_read+0x12>
  }

  return len;
 8000c1e:	687b      	ldr	r3, [r7, #4]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c50:	605a      	str	r2, [r3, #4]
  return 0;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <_isatty>:

int _isatty(int file)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c68:	2301      	movs	r3, #1
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	@ (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f002 ff04 	bl	8003acc <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	@ (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20018000 	.word	0x20018000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	200000d8 	.word	0x200000d8
 8000cf8:	20000278 	.word	0x20000278

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	@ (8000d70 <MX_USART2_UART_Init+0x50>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d58:	f002 f854 	bl	8002e04 <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d62:	f7ff fee7 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000dc 	.word	0x200000dc
 8000d70:	40004400 	.word	0x40004400

08000d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	@ (8000df8 <HAL_UART_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12b      	bne.n	8000dee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dce:	230c      	movs	r3, #12
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dde:	2307      	movs	r3, #7
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <HAL_UART_MspInit+0x8c>)
 8000dea:	f000 f9b1 	bl	8001150 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	@ 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40004400 	.word	0x40004400
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e08:	f7ff ff78 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	@ (8000e44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	@ (8000e50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f002 fe51 	bl	8003ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fdb9 	bl	80009ac <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e48:	08004624 	.word	0x08004624
  ldr r2, =_sbss
 8000e4c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e50:	20000274 	.word	0x20000274

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	@ (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f931 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 f808 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fe58 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f93b 	bl	8001136 <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f911 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	@ (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000124 	.word	0x20000124

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000124 	.word	0x20000124

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffee 	bl	8000f24 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <HAL_Delay+0x44>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffde 	bl	8000f24 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	@ (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	@ (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	@ 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	@ 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff47 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff5c 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff8e 	bl	800103c <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffb0 	bl	80010a4 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	e159      	b.n	8001420 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800116c:	2201      	movs	r2, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	429a      	cmp	r2, r3
 8001186:	f040 8148 	bne.w	800141a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	2b01      	cmp	r3, #1
 8001194:	d005      	beq.n	80011a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d130      	bne.n	8001204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f003 0201 	and.w	r2, r3, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b03      	cmp	r3, #3
 800120e:	d017      	beq.n	8001240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d123      	bne.n	8001294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	220f      	movs	r2, #15
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	08da      	lsrs	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3208      	adds	r2, #8
 800128e:	69b9      	ldr	r1, [r7, #24]
 8001290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0203 	and.w	r2, r3, #3
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80a2 	beq.w	800141a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b57      	ldr	r3, [pc, #348]	@ (8001438 <HAL_GPIO_Init+0x2e8>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	4a56      	ldr	r2, [pc, #344]	@ (8001438 <HAL_GPIO_Init+0x2e8>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012e6:	4b54      	ldr	r3, [pc, #336]	@ (8001438 <HAL_GPIO_Init+0x2e8>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f2:	4a52      	ldr	r2, [pc, #328]	@ (800143c <HAL_GPIO_Init+0x2ec>)
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a49      	ldr	r2, [pc, #292]	@ (8001440 <HAL_GPIO_Init+0x2f0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d019      	beq.n	8001352 <HAL_GPIO_Init+0x202>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a48      	ldr	r2, [pc, #288]	@ (8001444 <HAL_GPIO_Init+0x2f4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x1fe>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a47      	ldr	r2, [pc, #284]	@ (8001448 <HAL_GPIO_Init+0x2f8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x1fa>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a46      	ldr	r2, [pc, #280]	@ (800144c <HAL_GPIO_Init+0x2fc>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x1f6>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a45      	ldr	r2, [pc, #276]	@ (8001450 <HAL_GPIO_Init+0x300>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x1f2>
 800133e:	2304      	movs	r3, #4
 8001340:	e008      	b.n	8001354 <HAL_GPIO_Init+0x204>
 8001342:	2307      	movs	r3, #7
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x204>
 8001346:	2303      	movs	r3, #3
 8001348:	e004      	b.n	8001354 <HAL_GPIO_Init+0x204>
 800134a:	2302      	movs	r3, #2
 800134c:	e002      	b.n	8001354 <HAL_GPIO_Init+0x204>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <HAL_GPIO_Init+0x204>
 8001352:	2300      	movs	r3, #0
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	f002 0203 	and.w	r2, r2, #3
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	4093      	lsls	r3, r2
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001364:	4935      	ldr	r1, [pc, #212]	@ (800143c <HAL_GPIO_Init+0x2ec>)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001372:	4b38      	ldr	r3, [pc, #224]	@ (8001454 <HAL_GPIO_Init+0x304>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001396:	4a2f      	ldr	r2, [pc, #188]	@ (8001454 <HAL_GPIO_Init+0x304>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800139c:	4b2d      	ldr	r3, [pc, #180]	@ (8001454 <HAL_GPIO_Init+0x304>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c0:	4a24      	ldr	r2, [pc, #144]	@ (8001454 <HAL_GPIO_Init+0x304>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013c6:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <HAL_GPIO_Init+0x304>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001454 <HAL_GPIO_Init+0x304>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f0:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_GPIO_Init+0x304>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001414:	4a0f      	ldr	r2, [pc, #60]	@ (8001454 <HAL_GPIO_Init+0x304>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3301      	adds	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	f67f aea2 	bls.w	800116c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3724      	adds	r7, #36	@ 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40013800 	.word	0x40013800
 8001440:	40020000 	.word	0x40020000
 8001444:	40020400 	.word	0x40020400
 8001448:	40020800 	.word	0x40020800
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40021000 	.word	0x40021000
 8001454:	40013c00 	.word	0x40013c00

08001458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
 8001464:	4613      	mov	r3, r2
 8001466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001468:	787b      	ldrb	r3, [r7, #1]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001474:	e003      	b.n	800147e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	041a      	lsls	r2, r3, #16
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	619a      	str	r2, [r3, #24]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e12b      	b.n	80016f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d106      	bne.n	80014b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fa1c 	bl	80008f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2224      	movs	r2, #36	@ 0x24
 80014bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0201 	bic.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014f0:	f001 fc60 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 80014f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4a81      	ldr	r2, [pc, #516]	@ (8001700 <HAL_I2C_Init+0x274>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d807      	bhi.n	8001510 <HAL_I2C_Init+0x84>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4a80      	ldr	r2, [pc, #512]	@ (8001704 <HAL_I2C_Init+0x278>)
 8001504:	4293      	cmp	r3, r2
 8001506:	bf94      	ite	ls
 8001508:	2301      	movls	r3, #1
 800150a:	2300      	movhi	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	e006      	b.n	800151e <HAL_I2C_Init+0x92>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4a7d      	ldr	r2, [pc, #500]	@ (8001708 <HAL_I2C_Init+0x27c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	bf94      	ite	ls
 8001518:	2301      	movls	r3, #1
 800151a:	2300      	movhi	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0e7      	b.n	80016f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4a78      	ldr	r2, [pc, #480]	@ (800170c <HAL_I2C_Init+0x280>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	0c9b      	lsrs	r3, r3, #18
 8001530:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a6a      	ldr	r2, [pc, #424]	@ (8001700 <HAL_I2C_Init+0x274>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d802      	bhi.n	8001560 <HAL_I2C_Init+0xd4>
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	3301      	adds	r3, #1
 800155e:	e009      	b.n	8001574 <HAL_I2C_Init+0xe8>
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	4a69      	ldr	r2, [pc, #420]	@ (8001710 <HAL_I2C_Init+0x284>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	099b      	lsrs	r3, r3, #6
 8001572:	3301      	adds	r3, #1
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	430b      	orrs	r3, r1
 800157a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001586:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	495c      	ldr	r1, [pc, #368]	@ (8001700 <HAL_I2C_Init+0x274>)
 8001590:	428b      	cmp	r3, r1
 8001592:	d819      	bhi.n	80015c8 <HAL_I2C_Init+0x13c>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1e59      	subs	r1, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fbb1 f3f3 	udiv	r3, r1, r3
 80015a2:	1c59      	adds	r1, r3, #1
 80015a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015a8:	400b      	ands	r3, r1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00a      	beq.n	80015c4 <HAL_I2C_Init+0x138>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1e59      	subs	r1, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c2:	e051      	b.n	8001668 <HAL_I2C_Init+0x1dc>
 80015c4:	2304      	movs	r3, #4
 80015c6:	e04f      	b.n	8001668 <HAL_I2C_Init+0x1dc>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d111      	bne.n	80015f4 <HAL_I2C_Init+0x168>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1e58      	subs	r0, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	440b      	add	r3, r1
 80015de:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e2:	3301      	adds	r3, #1
 80015e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bf0c      	ite	eq
 80015ec:	2301      	moveq	r3, #1
 80015ee:	2300      	movne	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	e012      	b.n	800161a <HAL_I2C_Init+0x18e>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1e58      	subs	r0, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	0099      	lsls	r1, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	fbb0 f3f3 	udiv	r3, r0, r3
 800160a:	3301      	adds	r3, #1
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_I2C_Init+0x196>
 800161e:	2301      	movs	r3, #1
 8001620:	e022      	b.n	8001668 <HAL_I2C_Init+0x1dc>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10e      	bne.n	8001648 <HAL_I2C_Init+0x1bc>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1e58      	subs	r0, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6859      	ldr	r1, [r3, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	440b      	add	r3, r1
 8001638:	fbb0 f3f3 	udiv	r3, r0, r3
 800163c:	3301      	adds	r3, #1
 800163e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001646:	e00f      	b.n	8001668 <HAL_I2C_Init+0x1dc>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1e58      	subs	r0, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	0099      	lsls	r1, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	fbb0 f3f3 	udiv	r3, r0, r3
 800165e:	3301      	adds	r3, #1
 8001660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001664:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	4313      	orrs	r3, r2
 800166e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69da      	ldr	r2, [r3, #28]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001696:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6911      	ldr	r1, [r2, #16]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68d2      	ldr	r2, [r2, #12]
 80016a2:	4311      	orrs	r1, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	430b      	orrs	r3, r1
 80016aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0201 	orr.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2220      	movs	r2, #32
 80016e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	000186a0 	.word	0x000186a0
 8001704:	001e847f 	.word	0x001e847f
 8001708:	003d08ff 	.word	0x003d08ff
 800170c:	431bde83 	.word	0x431bde83
 8001710:	10624dd3 	.word	0x10624dd3

08001714 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af02      	add	r7, sp, #8
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4603      	mov	r3, r0
 8001724:	817b      	strh	r3, [r7, #10]
 8001726:	460b      	mov	r3, r1
 8001728:	813b      	strh	r3, [r7, #8]
 800172a:	4613      	mov	r3, r2
 800172c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800172e:	f7ff fbf9 	bl	8000f24 <HAL_GetTick>
 8001732:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b20      	cmp	r3, #32
 800173e:	f040 80d9 	bne.w	80018f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2319      	movs	r3, #25
 8001748:	2201      	movs	r2, #1
 800174a:	496d      	ldr	r1, [pc, #436]	@ (8001900 <HAL_I2C_Mem_Write+0x1ec>)
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f000 fc8b 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
 800175a:	e0cc      	b.n	80018f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001762:	2b01      	cmp	r3, #1
 8001764:	d101      	bne.n	800176a <HAL_I2C_Mem_Write+0x56>
 8001766:	2302      	movs	r3, #2
 8001768:	e0c5      	b.n	80018f6 <HAL_I2C_Mem_Write+0x1e2>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	d007      	beq.n	8001790 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800179e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2221      	movs	r2, #33	@ 0x21
 80017a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2240      	movs	r2, #64	@ 0x40
 80017ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6a3a      	ldr	r2, [r7, #32]
 80017ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80017c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001904 <HAL_I2C_Mem_Write+0x1f0>)
 80017d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017d2:	88f8      	ldrh	r0, [r7, #6]
 80017d4:	893a      	ldrh	r2, [r7, #8]
 80017d6:	8979      	ldrh	r1, [r7, #10]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	4603      	mov	r3, r0
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fac2 	bl	8001d6c <I2C_RequestMemoryWrite>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d052      	beq.n	8001894 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e081      	b.n	80018f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 fd50 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00d      	beq.n	800181e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	2b04      	cmp	r3, #4
 8001808:	d107      	bne.n	800181a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001818:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06b      	b.n	80018f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001838:	3b01      	subs	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001844:	b29b      	uxth	r3, r3
 8001846:	3b01      	subs	r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b04      	cmp	r3, #4
 800185a:	d11b      	bne.n	8001894 <HAL_I2C_Mem_Write+0x180>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001860:	2b00      	cmp	r3, #0
 8001862:	d017      	beq.n	8001894 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800188a:	b29b      	uxth	r3, r3
 800188c:	3b01      	subs	r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1aa      	bne.n	80017f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fd43 	bl	800232c <I2C_WaitOnBTFFlagUntilTimeout>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00d      	beq.n	80018c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d107      	bne.n	80018c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e016      	b.n	80018f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e000      	b.n	80018f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018f4:	2302      	movs	r3, #2
  }
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	00100002 	.word	0x00100002
 8001904:	ffff0000 	.word	0xffff0000

08001908 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	@ 0x30
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	4608      	mov	r0, r1
 8001912:	4611      	mov	r1, r2
 8001914:	461a      	mov	r2, r3
 8001916:	4603      	mov	r3, r0
 8001918:	817b      	strh	r3, [r7, #10]
 800191a:	460b      	mov	r3, r1
 800191c:	813b      	strh	r3, [r7, #8]
 800191e:	4613      	mov	r3, r2
 8001920:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001922:	f7ff faff 	bl	8000f24 <HAL_GetTick>
 8001926:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b20      	cmp	r3, #32
 8001932:	f040 8214 	bne.w	8001d5e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2319      	movs	r3, #25
 800193c:	2201      	movs	r2, #1
 800193e:	497b      	ldr	r1, [pc, #492]	@ (8001b2c <HAL_I2C_Mem_Read+0x224>)
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 fb91 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800194c:	2302      	movs	r3, #2
 800194e:	e207      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_I2C_Mem_Read+0x56>
 800195a:	2302      	movs	r3, #2
 800195c:	e200      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d007      	beq.n	8001984 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001992:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2222      	movs	r2, #34	@ 0x22
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2240      	movs	r2, #64	@ 0x40
 80019a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80019b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001b30 <HAL_I2C_Mem_Read+0x228>)
 80019c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019c6:	88f8      	ldrh	r0, [r7, #6]
 80019c8:	893a      	ldrh	r2, [r7, #8]
 80019ca:	8979      	ldrh	r1, [r7, #10]
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4603      	mov	r3, r0
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 fa5e 	bl	8001e98 <I2C_RequestMemoryRead>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e1bc      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d113      	bne.n	8001a16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	623b      	str	r3, [r7, #32]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	623b      	str	r3, [r7, #32]
 8001a02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e190      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d11b      	bne.n	8001a56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e170      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d11b      	bne.n	8001a96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	e150      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001aac:	e144      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	f200 80f1 	bhi.w	8001c9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d123      	bne.n	8001b08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 fc79 	bl	80023bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e145      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b06:	e117      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d14e      	bne.n	8001bae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b16:	2200      	movs	r2, #0
 8001b18:	4906      	ldr	r1, [pc, #24]	@ (8001b34 <HAL_I2C_Mem_Read+0x22c>)
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 faa4 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d008      	beq.n	8001b38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e11a      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
 8001b2a:	bf00      	nop
 8001b2c:	00100002 	.word	0x00100002
 8001b30:	ffff0000 	.word	0xffff0000
 8001b34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bac:	e0c4      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	496c      	ldr	r1, [pc, #432]	@ (8001d68 <HAL_I2C_Mem_Read+0x460>)
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 fa55 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0cb      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c10:	2200      	movs	r2, #0
 8001c12:	4955      	ldr	r1, [pc, #340]	@ (8001d68 <HAL_I2C_Mem_Read+0x460>)
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 fa27 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e09d      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c98:	e04e      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c9c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fb8c 	bl	80023bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e058      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d124      	bne.n	8001d38 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d107      	bne.n	8001d06 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d04:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f47f aeb6 	bne.w	8001aae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
  }
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	00010004 	.word	0x00010004

08001d6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	4608      	mov	r0, r1
 8001d76:	4611      	mov	r1, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	817b      	strh	r3, [r7, #10]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	813b      	strh	r3, [r7, #8]
 8001d82:	4613      	mov	r3, r2
 8001d84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f960 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00d      	beq.n	8001dca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dbc:	d103      	bne.n	8001dc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e05f      	b.n	8001e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dca:	897b      	ldrh	r3, [r7, #10]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001dd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	492d      	ldr	r1, [pc, #180]	@ (8001e94 <I2C_RequestMemoryWrite+0x128>)
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f9bb 	bl	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e04c      	b.n	8001e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e08:	6a39      	ldr	r1, [r7, #32]
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 fa46 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00d      	beq.n	8001e32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d107      	bne.n	8001e2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e02b      	b.n	8001e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d105      	bne.n	8001e44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e38:	893b      	ldrh	r3, [r7, #8]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	611a      	str	r2, [r3, #16]
 8001e42:	e021      	b.n	8001e88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e44:	893b      	ldrh	r3, [r7, #8]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e54:	6a39      	ldr	r1, [r7, #32]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fa20 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00d      	beq.n	8001e7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d107      	bne.n	8001e7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e005      	b.n	8001e8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e7e:	893b      	ldrh	r3, [r7, #8]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	00010002 	.word	0x00010002

08001e98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	817b      	strh	r3, [r7, #10]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	813b      	strh	r3, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ed0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f8c2 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00d      	beq.n	8001f06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ef8:	d103      	bne.n	8001f02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e0aa      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f06:	897b      	ldrh	r3, [r7, #10]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	6a3a      	ldr	r2, [r7, #32]
 8001f1a:	4952      	ldr	r1, [pc, #328]	@ (8002064 <I2C_RequestMemoryRead+0x1cc>)
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 f91d 	bl	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e097      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f44:	6a39      	ldr	r1, [r7, #32]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f9a8 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00d      	beq.n	8001f6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d107      	bne.n	8001f6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e076      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f74:	893b      	ldrh	r3, [r7, #8]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	611a      	str	r2, [r3, #16]
 8001f7e:	e021      	b.n	8001fc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f80:	893b      	ldrh	r3, [r7, #8]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f90:	6a39      	ldr	r1, [r7, #32]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f982 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00d      	beq.n	8001fba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d107      	bne.n	8001fb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e050      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fba:	893b      	ldrh	r3, [r7, #8]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc6:	6a39      	ldr	r1, [r7, #32]
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f967 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00d      	beq.n	8001ff0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d107      	bne.n	8001fec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e035      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	2200      	movs	r2, #0
 8002008:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f82b 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002026:	d103      	bne.n	8002030 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800202e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e013      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002034:	897b      	ldrh	r3, [r7, #10]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	6a3a      	ldr	r2, [r7, #32]
 8002048:	4906      	ldr	r1, [pc, #24]	@ (8002064 <I2C_RequestMemoryRead+0x1cc>)
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f886 	bl	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	00010002 	.word	0x00010002

08002068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002078:	e048      	b.n	800210c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d044      	beq.n	800210c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002082:	f7fe ff4f 	bl	8000f24 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d302      	bcc.n	8002098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d139      	bne.n	800210c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	0c1b      	lsrs	r3, r3, #16
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d10d      	bne.n	80020be <I2C_WaitOnFlagUntilTimeout+0x56>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	43da      	mvns	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4013      	ands	r3, r2
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	e00c      	b.n	80020d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	43da      	mvns	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4013      	ands	r3, r2
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d116      	bne.n	800210c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e023      	b.n	8002154 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	0c1b      	lsrs	r3, r3, #16
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10d      	bne.n	8002132 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	43da      	mvns	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	4013      	ands	r3, r2
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	e00c      	b.n	800214c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	43da      	mvns	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4013      	ands	r3, r2
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	429a      	cmp	r2, r3
 8002150:	d093      	beq.n	800207a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800216a:	e071      	b.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217a:	d123      	bne.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800218a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002194:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	f043 0204 	orr.w	r2, r3, #4
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e067      	b.n	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ca:	d041      	beq.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021cc:	f7fe feaa 	bl	8000f24 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d302      	bcc.n	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d136      	bne.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d10c      	bne.n	8002206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4013      	ands	r3, r2
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	e00b      	b.n	800221e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	43da      	mvns	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	4013      	ands	r3, r2
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf14      	ite	ne
 8002218:	2301      	movne	r3, #1
 800221a:	2300      	moveq	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d016      	beq.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2220      	movs	r2, #32
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e021      	b.n	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	0c1b      	lsrs	r3, r3, #16
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d10c      	bne.n	8002274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	43da      	mvns	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	4013      	ands	r3, r2
 8002266:	b29b      	uxth	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e00b      	b.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4013      	ands	r3, r2
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	f47f af6d 	bne.w	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022a8:	e034      	b.n	8002314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f8e3 	bl	8002476 <I2C_IsAcknowledgeFailed>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e034      	b.n	8002324 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d028      	beq.n	8002314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c2:	f7fe fe2f 	bl	8000f24 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d302      	bcc.n	80022d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d11d      	bne.n	8002314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e2:	2b80      	cmp	r3, #128	@ 0x80
 80022e4:	d016      	beq.n	8002314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	f043 0220 	orr.w	r2, r3, #32
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e007      	b.n	8002324 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231e:	2b80      	cmp	r3, #128	@ 0x80
 8002320:	d1c3      	bne.n	80022aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002338:	e034      	b.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f89b 	bl	8002476 <I2C_IsAcknowledgeFailed>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e034      	b.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d028      	beq.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7fe fde7 	bl	8000f24 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d11d      	bne.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b04      	cmp	r3, #4
 8002374:	d016      	beq.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	f043 0220 	orr.w	r2, r3, #32
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e007      	b.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d1c3      	bne.n	800233a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023c8:	e049      	b.n	800245e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b10      	cmp	r3, #16
 80023d6:	d119      	bne.n	800240c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0210 	mvn.w	r2, #16
 80023e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e030      	b.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240c:	f7fe fd8a 	bl	8000f24 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	429a      	cmp	r2, r3
 800241a:	d302      	bcc.n	8002422 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d11d      	bne.n	800245e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800242c:	2b40      	cmp	r3, #64	@ 0x40
 800242e:	d016      	beq.n	800245e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e007      	b.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002468:	2b40      	cmp	r3, #64	@ 0x40
 800246a:	d1ae      	bne.n	80023ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800248c:	d11b      	bne.n	80024c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002496:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	f043 0204 	orr.w	r2, r3, #4
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e267      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d075      	beq.n	80025de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024f2:	4b88      	ldr	r3, [pc, #544]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d00c      	beq.n	8002518 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fe:	4b85      	ldr	r3, [pc, #532]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002506:	2b08      	cmp	r3, #8
 8002508:	d112      	bne.n	8002530 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250a:	4b82      	ldr	r3, [pc, #520]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002512:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002516:	d10b      	bne.n	8002530 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	4b7e      	ldr	r3, [pc, #504]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d05b      	beq.n	80025dc <HAL_RCC_OscConfig+0x108>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d157      	bne.n	80025dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e242      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002538:	d106      	bne.n	8002548 <HAL_RCC_OscConfig+0x74>
 800253a:	4b76      	ldr	r3, [pc, #472]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a75      	ldr	r2, [pc, #468]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e01d      	b.n	8002584 <HAL_RCC_OscConfig+0xb0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x98>
 8002552:	4b70      	ldr	r3, [pc, #448]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6f      	ldr	r2, [pc, #444]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b6d      	ldr	r3, [pc, #436]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6c      	ldr	r2, [pc, #432]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0xb0>
 800256c:	4b69      	ldr	r3, [pc, #420]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a68      	ldr	r2, [pc, #416]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b66      	ldr	r3, [pc, #408]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a65      	ldr	r2, [pc, #404]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7fe fcca 	bl	8000f24 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7fe fcc6 	bl	8000f24 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e207      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0xc0>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fe fcb6 	bl	8000f24 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7fe fcb2 	bl	8000f24 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	@ 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1f3      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ce:	4b51      	ldr	r3, [pc, #324]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0xe8>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d063      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d11c      	bne.n	800263c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b44      	ldr	r3, [pc, #272]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d116      	bne.n	800263c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	4b41      	ldr	r3, [pc, #260]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x152>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e1c7      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b3b      	ldr	r3, [pc, #236]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4937      	ldr	r1, [pc, #220]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	e03a      	b.n	80026b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002644:	4b34      	ldr	r3, [pc, #208]	@ (8002718 <HAL_RCC_OscConfig+0x244>)
 8002646:	2201      	movs	r2, #1
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe fc6b 	bl	8000f24 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002652:	f7fe fc67 	bl	8000f24 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e1a8      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	4b2b      	ldr	r3, [pc, #172]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4925      	ldr	r1, [pc, #148]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
 8002684:	e015      	b.n	80026b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002686:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_RCC_OscConfig+0x244>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe fc4a 	bl	8000f24 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002694:	f7fe fc46 	bl	8000f24 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e187      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d036      	beq.n	800272c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d016      	beq.n	80026f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c6:	4b15      	ldr	r3, [pc, #84]	@ (800271c <HAL_RCC_OscConfig+0x248>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe fc2a 	bl	8000f24 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d4:	f7fe fc26 	bl	8000f24 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e167      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80026e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x200>
 80026f2:	e01b      	b.n	800272c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f4:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_RCC_OscConfig+0x248>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fa:	f7fe fc13 	bl	8000f24 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	e00e      	b.n	8002720 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002702:	f7fe fc0f 	bl	8000f24 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d907      	bls.n	8002720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e150      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
 8002714:	40023800 	.word	0x40023800
 8002718:	42470000 	.word	0x42470000
 800271c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	4b88      	ldr	r3, [pc, #544]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ea      	bne.n	8002702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8097 	beq.w	8002868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b81      	ldr	r3, [pc, #516]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	4b7d      	ldr	r3, [pc, #500]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a7c      	ldr	r2, [pc, #496]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b7a      	ldr	r3, [pc, #488]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b77      	ldr	r3, [pc, #476]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d118      	bne.n	80027a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	4b74      	ldr	r3, [pc, #464]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a73      	ldr	r2, [pc, #460]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7fe fbcf 	bl	8000f24 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7fe fbcb 	bl	8000f24 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e10c      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	4b6a      	ldr	r3, [pc, #424]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x2ea>
 80027b0:	4b64      	ldr	r3, [pc, #400]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b4:	4a63      	ldr	r2, [pc, #396]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80027bc:	e01c      	b.n	80027f8 <HAL_RCC_OscConfig+0x324>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x30c>
 80027c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027de:	e00b      	b.n	80027f8 <HAL_RCC_OscConfig+0x324>
 80027e0:	4b58      	ldr	r3, [pc, #352]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e4:	4a57      	ldr	r2, [pc, #348]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ec:	4b55      	ldr	r3, [pc, #340]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f0:	4a54      	ldr	r2, [pc, #336]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027f2:	f023 0304 	bic.w	r3, r3, #4
 80027f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d015      	beq.n	800282c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe fb90 	bl	8000f24 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe fb8c 	bl	8000f24 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0cb      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281e:	4b49      	ldr	r3, [pc, #292]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ee      	beq.n	8002808 <HAL_RCC_OscConfig+0x334>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7fe fb7a 	bl	8000f24 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002832:	e00a      	b.n	800284a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f7fe fb76 	bl	8000f24 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0b5      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284a:	4b3e      	ldr	r3, [pc, #248]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ee      	bne.n	8002834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b39      	ldr	r3, [pc, #228]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	4a38      	ldr	r2, [pc, #224]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002866:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a1 	beq.w	80029b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002872:	4b34      	ldr	r3, [pc, #208]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b08      	cmp	r3, #8
 800287c:	d05c      	beq.n	8002938 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d141      	bne.n	800290a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b31      	ldr	r3, [pc, #196]	@ (800294c <HAL_RCC_OscConfig+0x478>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fb4a 	bl	8000f24 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe fb46 	bl	8000f24 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e087      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b27      	ldr	r3, [pc, #156]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	491b      	ldr	r1, [pc, #108]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028dc:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <HAL_RCC_OscConfig+0x478>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe fb1f 	bl	8000f24 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe fb1b 	bl	8000f24 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e05c      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x416>
 8002908:	e054      	b.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b10      	ldr	r3, [pc, #64]	@ (800294c <HAL_RCC_OscConfig+0x478>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe fb08 	bl	8000f24 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fb04 	bl	8000f24 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e045      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x444>
 8002936:	e03d      	b.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e038      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
 8002944:	40023800 	.word	0x40023800
 8002948:	40007000 	.word	0x40007000
 800294c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002950:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <HAL_RCC_OscConfig+0x4ec>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d028      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d121      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d11a      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002988:	4293      	cmp	r3, r2
 800298a:	d111      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	3b01      	subs	r3, #1
 800299a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0cc      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b68      	ldr	r3, [pc, #416]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d90c      	bls.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b65      	ldr	r3, [pc, #404]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b63      	ldr	r3, [pc, #396]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0b8      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a18:	4b59      	ldr	r3, [pc, #356]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4a58      	ldr	r2, [pc, #352]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a30:	4b53      	ldr	r3, [pc, #332]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a52      	ldr	r2, [pc, #328]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b50      	ldr	r3, [pc, #320]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	494d      	ldr	r1, [pc, #308]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d044      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b47      	ldr	r3, [pc, #284]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d119      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e07f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a82:	4b3f      	ldr	r3, [pc, #252]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e06f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b3b      	ldr	r3, [pc, #236]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e067      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b37      	ldr	r3, [pc, #220]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4934      	ldr	r1, [pc, #208]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab4:	f7fe fa36 	bl	8000f24 <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe fa32 	bl	8000f24 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e04f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b25      	ldr	r3, [pc, #148]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d20c      	bcs.n	8002b0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b20      	ldr	r3, [pc, #128]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e032      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	4b19      	ldr	r3, [pc, #100]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4916      	ldr	r1, [pc, #88]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b36:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	490e      	ldr	r1, [pc, #56]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b4a:	f000 f821 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	490a      	ldr	r1, [pc, #40]	@ (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	5ccb      	ldrb	r3, [r1, r3]
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	4a09      	ldr	r2, [pc, #36]	@ (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b66:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe f996 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023c00 	.word	0x40023c00
 8002b80:	40023800 	.word	0x40023800
 8002b84:	080045c8 	.word	0x080045c8
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	20000004 	.word	0x20000004

08002b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b94:	b094      	sub	sp, #80	@ 0x50
 8002b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba8:	4b79      	ldr	r3, [pc, #484]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d00d      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	f200 80e1 	bhi.w	8002d7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_GetSysClockFreq+0x3a>
 8002bc2:	e0db      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc4:	4b73      	ldr	r3, [pc, #460]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bc8:	e0db      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bca:	4b73      	ldr	r3, [pc, #460]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bce:	e0d8      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd0:	4b6f      	ldr	r3, [pc, #444]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bd8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bda:	4b6d      	ldr	r3, [pc, #436]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d063      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be6:	4b6a      	ldr	r3, [pc, #424]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	099b      	lsrs	r3, r3, #6
 8002bec:	2200      	movs	r2, #0
 8002bee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bf0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c02:	4622      	mov	r2, r4
 8002c04:	462b      	mov	r3, r5
 8002c06:	f04f 0000 	mov.w	r0, #0
 8002c0a:	f04f 0100 	mov.w	r1, #0
 8002c0e:	0159      	lsls	r1, r3, #5
 8002c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c14:	0150      	lsls	r0, r2, #5
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	1a51      	subs	r1, r2, r1
 8002c1e:	6139      	str	r1, [r7, #16]
 8002c20:	4629      	mov	r1, r5
 8002c22:	eb63 0301 	sbc.w	r3, r3, r1
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c34:	4659      	mov	r1, fp
 8002c36:	018b      	lsls	r3, r1, #6
 8002c38:	4651      	mov	r1, sl
 8002c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c3e:	4651      	mov	r1, sl
 8002c40:	018a      	lsls	r2, r1, #6
 8002c42:	4651      	mov	r1, sl
 8002c44:	ebb2 0801 	subs.w	r8, r2, r1
 8002c48:	4659      	mov	r1, fp
 8002c4a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c62:	4690      	mov	r8, r2
 8002c64:	4699      	mov	r9, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	eb18 0303 	adds.w	r3, r8, r3
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	462b      	mov	r3, r5
 8002c70:	eb49 0303 	adc.w	r3, r9, r3
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c82:	4629      	mov	r1, r5
 8002c84:	024b      	lsls	r3, r1, #9
 8002c86:	4621      	mov	r1, r4
 8002c88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	024a      	lsls	r2, r1, #9
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c96:	2200      	movs	r2, #0
 8002c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ca0:	f7fd faee 	bl	8000280 <__aeabi_uldivmod>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4613      	mov	r3, r2
 8002caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cac:	e058      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cae:	4b38      	ldr	r3, [pc, #224]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	099b      	lsrs	r3, r3, #6
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	4611      	mov	r1, r2
 8002cba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cbe:	623b      	str	r3, [r7, #32]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cc8:	4642      	mov	r2, r8
 8002cca:	464b      	mov	r3, r9
 8002ccc:	f04f 0000 	mov.w	r0, #0
 8002cd0:	f04f 0100 	mov.w	r1, #0
 8002cd4:	0159      	lsls	r1, r3, #5
 8002cd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cda:	0150      	lsls	r0, r2, #5
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4641      	mov	r1, r8
 8002ce2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d00:	ebb2 040a 	subs.w	r4, r2, sl
 8002d04:	eb63 050b 	sbc.w	r5, r3, fp
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	00eb      	lsls	r3, r5, #3
 8002d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d16:	00e2      	lsls	r2, r4, #3
 8002d18:	4614      	mov	r4, r2
 8002d1a:	461d      	mov	r5, r3
 8002d1c:	4643      	mov	r3, r8
 8002d1e:	18e3      	adds	r3, r4, r3
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	464b      	mov	r3, r9
 8002d24:	eb45 0303 	adc.w	r3, r5, r3
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d36:	4629      	mov	r1, r5
 8002d38:	028b      	lsls	r3, r1, #10
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d40:	4621      	mov	r1, r4
 8002d42:	028a      	lsls	r2, r1, #10
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	61fa      	str	r2, [r7, #28]
 8002d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d54:	f7fd fa94 	bl	8000280 <__aeabi_uldivmod>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d7a:	e002      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3750      	adds	r7, #80	@ 0x50
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	007a1200 	.word	0x007a1200

08002d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da0:	4b03      	ldr	r3, [pc, #12]	@ (8002db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000000 	.word	0x20000000

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db8:	f7ff fff0 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	@ (8002dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0a9b      	lsrs	r3, r3, #10
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	@ (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	080045d8 	.word	0x080045d8

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de0:	f7ff ffdc 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0b5b      	lsrs	r3, r3, #13
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	@ (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	080045d8 	.word	0x080045d8

08002e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e042      	b.n	8002e9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fd ffa2 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2224      	movs	r2, #36	@ 0x24
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f973 	bl	8003134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	@ 0x28
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d175      	bne.n	8002fb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_UART_Transmit+0x2c>
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e06e      	b.n	8002fb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2221      	movs	r2, #33	@ 0x21
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ee2:	f7fe f81f 	bl	8000f24 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	88fa      	ldrh	r2, [r7, #6]
 8002ef2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002efc:	d108      	bne.n	8002f10 <HAL_UART_Transmit+0x6c>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d104      	bne.n	8002f10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	e003      	b.n	8002f18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f18:	e02e      	b.n	8002f78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2200      	movs	r2, #0
 8002f22:	2180      	movs	r1, #128	@ 0x80
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f848 	bl	8002fba <UART_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e03a      	b.n	8002fb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10b      	bne.n	8002f5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	3302      	adds	r3, #2
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	e007      	b.n	8002f6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	3301      	adds	r3, #1
 8002f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1cb      	bne.n	8002f1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2140      	movs	r1, #64	@ 0x40
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f814 	bl	8002fba <UART_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e006      	b.n	8002fb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fca:	e03b      	b.n	8003044 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd2:	d037      	beq.n	8003044 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd4:	f7fd ffa6 	bl	8000f24 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	6a3a      	ldr	r2, [r7, #32]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <UART_WaitOnFlagUntilTimeout+0x30>
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e03a      	b.n	8003064 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d023      	beq.n	8003044 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b80      	cmp	r3, #128	@ 0x80
 8003000:	d020      	beq.n	8003044 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b40      	cmp	r3, #64	@ 0x40
 8003006:	d01d      	beq.n	8003044 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b08      	cmp	r3, #8
 8003014:	d116      	bne.n	8003044 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f81d 	bl	800306c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2208      	movs	r2, #8
 8003036:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e00f      	b.n	8003064 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	429a      	cmp	r2, r3
 8003060:	d0b4      	beq.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800306c:	b480      	push	{r7}
 800306e:	b095      	sub	sp, #84	@ 0x54
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003086:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800308a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003094:	643a      	str	r2, [r7, #64]	@ 0x40
 8003096:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800309a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e5      	bne.n	8003074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3314      	adds	r3, #20
 80030ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3314      	adds	r3, #20
 80030c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030d0:	e841 2300 	strex	r3, r2, [r1]
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e5      	bne.n	80030a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d119      	bne.n	8003118 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	e853 3f00 	ldrex	r3, [r3]
 80030f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f023 0310 	bic.w	r3, r3, #16
 80030fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	330c      	adds	r3, #12
 8003102:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003104:	61ba      	str	r2, [r7, #24]
 8003106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003108:	6979      	ldr	r1, [r7, #20]
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	e841 2300 	strex	r3, r2, [r1]
 8003110:	613b      	str	r3, [r7, #16]
   return(result);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e5      	bne.n	80030e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003126:	bf00      	nop
 8003128:	3754      	adds	r7, #84	@ 0x54
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003138:	b0c0      	sub	sp, #256	@ 0x100
 800313a:	af00      	add	r7, sp, #0
 800313c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003150:	68d9      	ldr	r1, [r3, #12]
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	ea40 0301 	orr.w	r3, r0, r1
 800315c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	431a      	orrs	r2, r3
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	431a      	orrs	r2, r3
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800318c:	f021 010c 	bic.w	r1, r1, #12
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800319a:	430b      	orrs	r3, r1
 800319c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ae:	6999      	ldr	r1, [r3, #24]
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	ea40 0301 	orr.w	r3, r0, r1
 80031ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b8f      	ldr	r3, [pc, #572]	@ (8003400 <UART_SetConfig+0x2cc>)
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d005      	beq.n	80031d4 <UART_SetConfig+0xa0>
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b8d      	ldr	r3, [pc, #564]	@ (8003404 <UART_SetConfig+0x2d0>)
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d104      	bne.n	80031de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031d4:	f7ff fe02 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 80031d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031dc:	e003      	b.n	80031e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031de:	f7ff fde9 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 80031e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f0:	f040 810c 	bne.w	800340c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031f8:	2200      	movs	r2, #0
 80031fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003202:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003206:	4622      	mov	r2, r4
 8003208:	462b      	mov	r3, r5
 800320a:	1891      	adds	r1, r2, r2
 800320c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800320e:	415b      	adcs	r3, r3
 8003210:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003216:	4621      	mov	r1, r4
 8003218:	eb12 0801 	adds.w	r8, r2, r1
 800321c:	4629      	mov	r1, r5
 800321e:	eb43 0901 	adc.w	r9, r3, r1
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800322e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003236:	4690      	mov	r8, r2
 8003238:	4699      	mov	r9, r3
 800323a:	4623      	mov	r3, r4
 800323c:	eb18 0303 	adds.w	r3, r8, r3
 8003240:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003244:	462b      	mov	r3, r5
 8003246:	eb49 0303 	adc.w	r3, r9, r3
 800324a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800325a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800325e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003262:	460b      	mov	r3, r1
 8003264:	18db      	adds	r3, r3, r3
 8003266:	653b      	str	r3, [r7, #80]	@ 0x50
 8003268:	4613      	mov	r3, r2
 800326a:	eb42 0303 	adc.w	r3, r2, r3
 800326e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003270:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003274:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003278:	f7fd f802 	bl	8000280 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4b61      	ldr	r3, [pc, #388]	@ (8003408 <UART_SetConfig+0x2d4>)
 8003282:	fba3 2302 	umull	r2, r3, r3, r2
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	011c      	lsls	r4, r3, #4
 800328a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800328e:	2200      	movs	r2, #0
 8003290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003294:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003298:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800329c:	4642      	mov	r2, r8
 800329e:	464b      	mov	r3, r9
 80032a0:	1891      	adds	r1, r2, r2
 80032a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032a4:	415b      	adcs	r3, r3
 80032a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032ac:	4641      	mov	r1, r8
 80032ae:	eb12 0a01 	adds.w	sl, r2, r1
 80032b2:	4649      	mov	r1, r9
 80032b4:	eb43 0b01 	adc.w	fp, r3, r1
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032cc:	4692      	mov	sl, r2
 80032ce:	469b      	mov	fp, r3
 80032d0:	4643      	mov	r3, r8
 80032d2:	eb1a 0303 	adds.w	r3, sl, r3
 80032d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032da:	464b      	mov	r3, r9
 80032dc:	eb4b 0303 	adc.w	r3, fp, r3
 80032e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032f8:	460b      	mov	r3, r1
 80032fa:	18db      	adds	r3, r3, r3
 80032fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80032fe:	4613      	mov	r3, r2
 8003300:	eb42 0303 	adc.w	r3, r2, r3
 8003304:	647b      	str	r3, [r7, #68]	@ 0x44
 8003306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800330a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800330e:	f7fc ffb7 	bl	8000280 <__aeabi_uldivmod>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4611      	mov	r1, r2
 8003318:	4b3b      	ldr	r3, [pc, #236]	@ (8003408 <UART_SetConfig+0x2d4>)
 800331a:	fba3 2301 	umull	r2, r3, r3, r1
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2264      	movs	r2, #100	@ 0x64
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	1acb      	subs	r3, r1, r3
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800332e:	4b36      	ldr	r3, [pc, #216]	@ (8003408 <UART_SetConfig+0x2d4>)
 8003330:	fba3 2302 	umull	r2, r3, r3, r2
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800333c:	441c      	add	r4, r3
 800333e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003342:	2200      	movs	r2, #0
 8003344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003348:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800334c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003350:	4642      	mov	r2, r8
 8003352:	464b      	mov	r3, r9
 8003354:	1891      	adds	r1, r2, r2
 8003356:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003358:	415b      	adcs	r3, r3
 800335a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800335c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003360:	4641      	mov	r1, r8
 8003362:	1851      	adds	r1, r2, r1
 8003364:	6339      	str	r1, [r7, #48]	@ 0x30
 8003366:	4649      	mov	r1, r9
 8003368:	414b      	adcs	r3, r1
 800336a:	637b      	str	r3, [r7, #52]	@ 0x34
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003378:	4659      	mov	r1, fp
 800337a:	00cb      	lsls	r3, r1, #3
 800337c:	4651      	mov	r1, sl
 800337e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003382:	4651      	mov	r1, sl
 8003384:	00ca      	lsls	r2, r1, #3
 8003386:	4610      	mov	r0, r2
 8003388:	4619      	mov	r1, r3
 800338a:	4603      	mov	r3, r0
 800338c:	4642      	mov	r2, r8
 800338e:	189b      	adds	r3, r3, r2
 8003390:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003394:	464b      	mov	r3, r9
 8003396:	460a      	mov	r2, r1
 8003398:	eb42 0303 	adc.w	r3, r2, r3
 800339c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033b4:	460b      	mov	r3, r1
 80033b6:	18db      	adds	r3, r3, r3
 80033b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ba:	4613      	mov	r3, r2
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033ca:	f7fc ff59 	bl	8000280 <__aeabi_uldivmod>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003408 <UART_SetConfig+0x2d4>)
 80033d4:	fba3 1302 	umull	r1, r3, r3, r2
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	2164      	movs	r1, #100	@ 0x64
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	3332      	adds	r3, #50	@ 0x32
 80033e6:	4a08      	ldr	r2, [pc, #32]	@ (8003408 <UART_SetConfig+0x2d4>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	f003 0207 	and.w	r2, r3, #7
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4422      	add	r2, r4
 80033fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033fc:	e106      	b.n	800360c <UART_SetConfig+0x4d8>
 80033fe:	bf00      	nop
 8003400:	40011000 	.word	0x40011000
 8003404:	40011400 	.word	0x40011400
 8003408:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800340c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003410:	2200      	movs	r2, #0
 8003412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003416:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800341a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800341e:	4642      	mov	r2, r8
 8003420:	464b      	mov	r3, r9
 8003422:	1891      	adds	r1, r2, r2
 8003424:	6239      	str	r1, [r7, #32]
 8003426:	415b      	adcs	r3, r3
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
 800342a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800342e:	4641      	mov	r1, r8
 8003430:	1854      	adds	r4, r2, r1
 8003432:	4649      	mov	r1, r9
 8003434:	eb43 0501 	adc.w	r5, r3, r1
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	00eb      	lsls	r3, r5, #3
 8003442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003446:	00e2      	lsls	r2, r4, #3
 8003448:	4614      	mov	r4, r2
 800344a:	461d      	mov	r5, r3
 800344c:	4643      	mov	r3, r8
 800344e:	18e3      	adds	r3, r4, r3
 8003450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003454:	464b      	mov	r3, r9
 8003456:	eb45 0303 	adc.w	r3, r5, r3
 800345a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800346a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800347a:	4629      	mov	r1, r5
 800347c:	008b      	lsls	r3, r1, #2
 800347e:	4621      	mov	r1, r4
 8003480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003484:	4621      	mov	r1, r4
 8003486:	008a      	lsls	r2, r1, #2
 8003488:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800348c:	f7fc fef8 	bl	8000280 <__aeabi_uldivmod>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4b60      	ldr	r3, [pc, #384]	@ (8003618 <UART_SetConfig+0x4e4>)
 8003496:	fba3 2302 	umull	r2, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	011c      	lsls	r4, r3, #4
 800349e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	1891      	adds	r1, r2, r2
 80034b6:	61b9      	str	r1, [r7, #24]
 80034b8:	415b      	adcs	r3, r3
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c0:	4641      	mov	r1, r8
 80034c2:	1851      	adds	r1, r2, r1
 80034c4:	6139      	str	r1, [r7, #16]
 80034c6:	4649      	mov	r1, r9
 80034c8:	414b      	adcs	r3, r1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d8:	4659      	mov	r1, fp
 80034da:	00cb      	lsls	r3, r1, #3
 80034dc:	4651      	mov	r1, sl
 80034de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e2:	4651      	mov	r1, sl
 80034e4:	00ca      	lsls	r2, r1, #3
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	4642      	mov	r2, r8
 80034ee:	189b      	adds	r3, r3, r2
 80034f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034f4:	464b      	mov	r3, r9
 80034f6:	460a      	mov	r2, r1
 80034f8:	eb42 0303 	adc.w	r3, r2, r3
 80034fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	67bb      	str	r3, [r7, #120]	@ 0x78
 800350a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003518:	4649      	mov	r1, r9
 800351a:	008b      	lsls	r3, r1, #2
 800351c:	4641      	mov	r1, r8
 800351e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003522:	4641      	mov	r1, r8
 8003524:	008a      	lsls	r2, r1, #2
 8003526:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800352a:	f7fc fea9 	bl	8000280 <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4611      	mov	r1, r2
 8003534:	4b38      	ldr	r3, [pc, #224]	@ (8003618 <UART_SetConfig+0x4e4>)
 8003536:	fba3 2301 	umull	r2, r3, r3, r1
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	2264      	movs	r2, #100	@ 0x64
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	1acb      	subs	r3, r1, r3
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	3332      	adds	r3, #50	@ 0x32
 8003548:	4a33      	ldr	r2, [pc, #204]	@ (8003618 <UART_SetConfig+0x4e4>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003554:	441c      	add	r4, r3
 8003556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800355a:	2200      	movs	r2, #0
 800355c:	673b      	str	r3, [r7, #112]	@ 0x70
 800355e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003560:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003564:	4642      	mov	r2, r8
 8003566:	464b      	mov	r3, r9
 8003568:	1891      	adds	r1, r2, r2
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	415b      	adcs	r3, r3
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003574:	4641      	mov	r1, r8
 8003576:	1851      	adds	r1, r2, r1
 8003578:	6039      	str	r1, [r7, #0]
 800357a:	4649      	mov	r1, r9
 800357c:	414b      	adcs	r3, r1
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800358c:	4659      	mov	r1, fp
 800358e:	00cb      	lsls	r3, r1, #3
 8003590:	4651      	mov	r1, sl
 8003592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003596:	4651      	mov	r1, sl
 8003598:	00ca      	lsls	r2, r1, #3
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	4642      	mov	r2, r8
 80035a2:	189b      	adds	r3, r3, r2
 80035a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035a6:	464b      	mov	r3, r9
 80035a8:	460a      	mov	r2, r1
 80035aa:	eb42 0303 	adc.w	r3, r2, r3
 80035ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035c8:	4649      	mov	r1, r9
 80035ca:	008b      	lsls	r3, r1, #2
 80035cc:	4641      	mov	r1, r8
 80035ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d2:	4641      	mov	r1, r8
 80035d4:	008a      	lsls	r2, r1, #2
 80035d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035da:	f7fc fe51 	bl	8000280 <__aeabi_uldivmod>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <UART_SetConfig+0x4e4>)
 80035e4:	fba3 1302 	umull	r1, r3, r3, r2
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	2164      	movs	r1, #100	@ 0x64
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	3332      	adds	r3, #50	@ 0x32
 80035f6:	4a08      	ldr	r2, [pc, #32]	@ (8003618 <UART_SetConfig+0x4e4>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	f003 020f 	and.w	r2, r3, #15
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4422      	add	r2, r4
 800360a:	609a      	str	r2, [r3, #8]
}
 800360c:	bf00      	nop
 800360e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003612:	46bd      	mov	sp, r7
 8003614:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003618:	51eb851f 	.word	0x51eb851f

0800361c <std>:
 800361c:	2300      	movs	r3, #0
 800361e:	b510      	push	{r4, lr}
 8003620:	4604      	mov	r4, r0
 8003622:	e9c0 3300 	strd	r3, r3, [r0]
 8003626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800362a:	6083      	str	r3, [r0, #8]
 800362c:	8181      	strh	r1, [r0, #12]
 800362e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003630:	81c2      	strh	r2, [r0, #14]
 8003632:	6183      	str	r3, [r0, #24]
 8003634:	4619      	mov	r1, r3
 8003636:	2208      	movs	r2, #8
 8003638:	305c      	adds	r0, #92	@ 0x5c
 800363a:	f000 f9f9 	bl	8003a30 <memset>
 800363e:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <std+0x58>)
 8003640:	6263      	str	r3, [r4, #36]	@ 0x24
 8003642:	4b0d      	ldr	r3, [pc, #52]	@ (8003678 <std+0x5c>)
 8003644:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003646:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <std+0x60>)
 8003648:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800364a:	4b0d      	ldr	r3, [pc, #52]	@ (8003680 <std+0x64>)
 800364c:	6323      	str	r3, [r4, #48]	@ 0x30
 800364e:	4b0d      	ldr	r3, [pc, #52]	@ (8003684 <std+0x68>)
 8003650:	6224      	str	r4, [r4, #32]
 8003652:	429c      	cmp	r4, r3
 8003654:	d006      	beq.n	8003664 <std+0x48>
 8003656:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800365a:	4294      	cmp	r4, r2
 800365c:	d002      	beq.n	8003664 <std+0x48>
 800365e:	33d0      	adds	r3, #208	@ 0xd0
 8003660:	429c      	cmp	r4, r3
 8003662:	d105      	bne.n	8003670 <std+0x54>
 8003664:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800366c:	f000 ba58 	b.w	8003b20 <__retarget_lock_init_recursive>
 8003670:	bd10      	pop	{r4, pc}
 8003672:	bf00      	nop
 8003674:	08003881 	.word	0x08003881
 8003678:	080038a3 	.word	0x080038a3
 800367c:	080038db 	.word	0x080038db
 8003680:	080038ff 	.word	0x080038ff
 8003684:	20000128 	.word	0x20000128

08003688 <stdio_exit_handler>:
 8003688:	4a02      	ldr	r2, [pc, #8]	@ (8003694 <stdio_exit_handler+0xc>)
 800368a:	4903      	ldr	r1, [pc, #12]	@ (8003698 <stdio_exit_handler+0x10>)
 800368c:	4803      	ldr	r0, [pc, #12]	@ (800369c <stdio_exit_handler+0x14>)
 800368e:	f000 b869 	b.w	8003764 <_fwalk_sglue>
 8003692:	bf00      	nop
 8003694:	2000000c 	.word	0x2000000c
 8003698:	080043bd 	.word	0x080043bd
 800369c:	2000001c 	.word	0x2000001c

080036a0 <cleanup_stdio>:
 80036a0:	6841      	ldr	r1, [r0, #4]
 80036a2:	4b0c      	ldr	r3, [pc, #48]	@ (80036d4 <cleanup_stdio+0x34>)
 80036a4:	4299      	cmp	r1, r3
 80036a6:	b510      	push	{r4, lr}
 80036a8:	4604      	mov	r4, r0
 80036aa:	d001      	beq.n	80036b0 <cleanup_stdio+0x10>
 80036ac:	f000 fe86 	bl	80043bc <_fflush_r>
 80036b0:	68a1      	ldr	r1, [r4, #8]
 80036b2:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <cleanup_stdio+0x38>)
 80036b4:	4299      	cmp	r1, r3
 80036b6:	d002      	beq.n	80036be <cleanup_stdio+0x1e>
 80036b8:	4620      	mov	r0, r4
 80036ba:	f000 fe7f 	bl	80043bc <_fflush_r>
 80036be:	68e1      	ldr	r1, [r4, #12]
 80036c0:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <cleanup_stdio+0x3c>)
 80036c2:	4299      	cmp	r1, r3
 80036c4:	d004      	beq.n	80036d0 <cleanup_stdio+0x30>
 80036c6:	4620      	mov	r0, r4
 80036c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036cc:	f000 be76 	b.w	80043bc <_fflush_r>
 80036d0:	bd10      	pop	{r4, pc}
 80036d2:	bf00      	nop
 80036d4:	20000128 	.word	0x20000128
 80036d8:	20000190 	.word	0x20000190
 80036dc:	200001f8 	.word	0x200001f8

080036e0 <global_stdio_init.part.0>:
 80036e0:	b510      	push	{r4, lr}
 80036e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003710 <global_stdio_init.part.0+0x30>)
 80036e4:	4c0b      	ldr	r4, [pc, #44]	@ (8003714 <global_stdio_init.part.0+0x34>)
 80036e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003718 <global_stdio_init.part.0+0x38>)
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	4620      	mov	r0, r4
 80036ec:	2200      	movs	r2, #0
 80036ee:	2104      	movs	r1, #4
 80036f0:	f7ff ff94 	bl	800361c <std>
 80036f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80036f8:	2201      	movs	r2, #1
 80036fa:	2109      	movs	r1, #9
 80036fc:	f7ff ff8e 	bl	800361c <std>
 8003700:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003704:	2202      	movs	r2, #2
 8003706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800370a:	2112      	movs	r1, #18
 800370c:	f7ff bf86 	b.w	800361c <std>
 8003710:	20000260 	.word	0x20000260
 8003714:	20000128 	.word	0x20000128
 8003718:	08003689 	.word	0x08003689

0800371c <__sfp_lock_acquire>:
 800371c:	4801      	ldr	r0, [pc, #4]	@ (8003724 <__sfp_lock_acquire+0x8>)
 800371e:	f000 ba00 	b.w	8003b22 <__retarget_lock_acquire_recursive>
 8003722:	bf00      	nop
 8003724:	20000269 	.word	0x20000269

08003728 <__sfp_lock_release>:
 8003728:	4801      	ldr	r0, [pc, #4]	@ (8003730 <__sfp_lock_release+0x8>)
 800372a:	f000 b9fb 	b.w	8003b24 <__retarget_lock_release_recursive>
 800372e:	bf00      	nop
 8003730:	20000269 	.word	0x20000269

08003734 <__sinit>:
 8003734:	b510      	push	{r4, lr}
 8003736:	4604      	mov	r4, r0
 8003738:	f7ff fff0 	bl	800371c <__sfp_lock_acquire>
 800373c:	6a23      	ldr	r3, [r4, #32]
 800373e:	b11b      	cbz	r3, 8003748 <__sinit+0x14>
 8003740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003744:	f7ff bff0 	b.w	8003728 <__sfp_lock_release>
 8003748:	4b04      	ldr	r3, [pc, #16]	@ (800375c <__sinit+0x28>)
 800374a:	6223      	str	r3, [r4, #32]
 800374c:	4b04      	ldr	r3, [pc, #16]	@ (8003760 <__sinit+0x2c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f5      	bne.n	8003740 <__sinit+0xc>
 8003754:	f7ff ffc4 	bl	80036e0 <global_stdio_init.part.0>
 8003758:	e7f2      	b.n	8003740 <__sinit+0xc>
 800375a:	bf00      	nop
 800375c:	080036a1 	.word	0x080036a1
 8003760:	20000260 	.word	0x20000260

08003764 <_fwalk_sglue>:
 8003764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003768:	4607      	mov	r7, r0
 800376a:	4688      	mov	r8, r1
 800376c:	4614      	mov	r4, r2
 800376e:	2600      	movs	r6, #0
 8003770:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003774:	f1b9 0901 	subs.w	r9, r9, #1
 8003778:	d505      	bpl.n	8003786 <_fwalk_sglue+0x22>
 800377a:	6824      	ldr	r4, [r4, #0]
 800377c:	2c00      	cmp	r4, #0
 800377e:	d1f7      	bne.n	8003770 <_fwalk_sglue+0xc>
 8003780:	4630      	mov	r0, r6
 8003782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003786:	89ab      	ldrh	r3, [r5, #12]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d907      	bls.n	800379c <_fwalk_sglue+0x38>
 800378c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003790:	3301      	adds	r3, #1
 8003792:	d003      	beq.n	800379c <_fwalk_sglue+0x38>
 8003794:	4629      	mov	r1, r5
 8003796:	4638      	mov	r0, r7
 8003798:	47c0      	blx	r8
 800379a:	4306      	orrs	r6, r0
 800379c:	3568      	adds	r5, #104	@ 0x68
 800379e:	e7e9      	b.n	8003774 <_fwalk_sglue+0x10>

080037a0 <iprintf>:
 80037a0:	b40f      	push	{r0, r1, r2, r3}
 80037a2:	b507      	push	{r0, r1, r2, lr}
 80037a4:	4906      	ldr	r1, [pc, #24]	@ (80037c0 <iprintf+0x20>)
 80037a6:	ab04      	add	r3, sp, #16
 80037a8:	6808      	ldr	r0, [r1, #0]
 80037aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80037ae:	6881      	ldr	r1, [r0, #8]
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	f000 fadb 	bl	8003d6c <_vfiprintf_r>
 80037b6:	b003      	add	sp, #12
 80037b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037bc:	b004      	add	sp, #16
 80037be:	4770      	bx	lr
 80037c0:	20000018 	.word	0x20000018

080037c4 <_puts_r>:
 80037c4:	6a03      	ldr	r3, [r0, #32]
 80037c6:	b570      	push	{r4, r5, r6, lr}
 80037c8:	6884      	ldr	r4, [r0, #8]
 80037ca:	4605      	mov	r5, r0
 80037cc:	460e      	mov	r6, r1
 80037ce:	b90b      	cbnz	r3, 80037d4 <_puts_r+0x10>
 80037d0:	f7ff ffb0 	bl	8003734 <__sinit>
 80037d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037d6:	07db      	lsls	r3, r3, #31
 80037d8:	d405      	bmi.n	80037e6 <_puts_r+0x22>
 80037da:	89a3      	ldrh	r3, [r4, #12]
 80037dc:	0598      	lsls	r0, r3, #22
 80037de:	d402      	bmi.n	80037e6 <_puts_r+0x22>
 80037e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037e2:	f000 f99e 	bl	8003b22 <__retarget_lock_acquire_recursive>
 80037e6:	89a3      	ldrh	r3, [r4, #12]
 80037e8:	0719      	lsls	r1, r3, #28
 80037ea:	d502      	bpl.n	80037f2 <_puts_r+0x2e>
 80037ec:	6923      	ldr	r3, [r4, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d135      	bne.n	800385e <_puts_r+0x9a>
 80037f2:	4621      	mov	r1, r4
 80037f4:	4628      	mov	r0, r5
 80037f6:	f000 f8c5 	bl	8003984 <__swsetup_r>
 80037fa:	b380      	cbz	r0, 800385e <_puts_r+0x9a>
 80037fc:	f04f 35ff 	mov.w	r5, #4294967295
 8003800:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003802:	07da      	lsls	r2, r3, #31
 8003804:	d405      	bmi.n	8003812 <_puts_r+0x4e>
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	059b      	lsls	r3, r3, #22
 800380a:	d402      	bmi.n	8003812 <_puts_r+0x4e>
 800380c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800380e:	f000 f989 	bl	8003b24 <__retarget_lock_release_recursive>
 8003812:	4628      	mov	r0, r5
 8003814:	bd70      	pop	{r4, r5, r6, pc}
 8003816:	2b00      	cmp	r3, #0
 8003818:	da04      	bge.n	8003824 <_puts_r+0x60>
 800381a:	69a2      	ldr	r2, [r4, #24]
 800381c:	429a      	cmp	r2, r3
 800381e:	dc17      	bgt.n	8003850 <_puts_r+0x8c>
 8003820:	290a      	cmp	r1, #10
 8003822:	d015      	beq.n	8003850 <_puts_r+0x8c>
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	6022      	str	r2, [r4, #0]
 800382a:	7019      	strb	r1, [r3, #0]
 800382c:	68a3      	ldr	r3, [r4, #8]
 800382e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003832:	3b01      	subs	r3, #1
 8003834:	60a3      	str	r3, [r4, #8]
 8003836:	2900      	cmp	r1, #0
 8003838:	d1ed      	bne.n	8003816 <_puts_r+0x52>
 800383a:	2b00      	cmp	r3, #0
 800383c:	da11      	bge.n	8003862 <_puts_r+0x9e>
 800383e:	4622      	mov	r2, r4
 8003840:	210a      	movs	r1, #10
 8003842:	4628      	mov	r0, r5
 8003844:	f000 f85f 	bl	8003906 <__swbuf_r>
 8003848:	3001      	adds	r0, #1
 800384a:	d0d7      	beq.n	80037fc <_puts_r+0x38>
 800384c:	250a      	movs	r5, #10
 800384e:	e7d7      	b.n	8003800 <_puts_r+0x3c>
 8003850:	4622      	mov	r2, r4
 8003852:	4628      	mov	r0, r5
 8003854:	f000 f857 	bl	8003906 <__swbuf_r>
 8003858:	3001      	adds	r0, #1
 800385a:	d1e7      	bne.n	800382c <_puts_r+0x68>
 800385c:	e7ce      	b.n	80037fc <_puts_r+0x38>
 800385e:	3e01      	subs	r6, #1
 8003860:	e7e4      	b.n	800382c <_puts_r+0x68>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	6022      	str	r2, [r4, #0]
 8003868:	220a      	movs	r2, #10
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e7ee      	b.n	800384c <_puts_r+0x88>
	...

08003870 <puts>:
 8003870:	4b02      	ldr	r3, [pc, #8]	@ (800387c <puts+0xc>)
 8003872:	4601      	mov	r1, r0
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	f7ff bfa5 	b.w	80037c4 <_puts_r>
 800387a:	bf00      	nop
 800387c:	20000018 	.word	0x20000018

08003880 <__sread>:
 8003880:	b510      	push	{r4, lr}
 8003882:	460c      	mov	r4, r1
 8003884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003888:	f000 f8fc 	bl	8003a84 <_read_r>
 800388c:	2800      	cmp	r0, #0
 800388e:	bfab      	itete	ge
 8003890:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003892:	89a3      	ldrhlt	r3, [r4, #12]
 8003894:	181b      	addge	r3, r3, r0
 8003896:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800389a:	bfac      	ite	ge
 800389c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800389e:	81a3      	strhlt	r3, [r4, #12]
 80038a0:	bd10      	pop	{r4, pc}

080038a2 <__swrite>:
 80038a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a6:	461f      	mov	r7, r3
 80038a8:	898b      	ldrh	r3, [r1, #12]
 80038aa:	05db      	lsls	r3, r3, #23
 80038ac:	4605      	mov	r5, r0
 80038ae:	460c      	mov	r4, r1
 80038b0:	4616      	mov	r6, r2
 80038b2:	d505      	bpl.n	80038c0 <__swrite+0x1e>
 80038b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038b8:	2302      	movs	r3, #2
 80038ba:	2200      	movs	r2, #0
 80038bc:	f000 f8d0 	bl	8003a60 <_lseek_r>
 80038c0:	89a3      	ldrh	r3, [r4, #12]
 80038c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038ca:	81a3      	strh	r3, [r4, #12]
 80038cc:	4632      	mov	r2, r6
 80038ce:	463b      	mov	r3, r7
 80038d0:	4628      	mov	r0, r5
 80038d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038d6:	f000 b8e7 	b.w	8003aa8 <_write_r>

080038da <__sseek>:
 80038da:	b510      	push	{r4, lr}
 80038dc:	460c      	mov	r4, r1
 80038de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038e2:	f000 f8bd 	bl	8003a60 <_lseek_r>
 80038e6:	1c43      	adds	r3, r0, #1
 80038e8:	89a3      	ldrh	r3, [r4, #12]
 80038ea:	bf15      	itete	ne
 80038ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80038ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80038f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80038f6:	81a3      	strheq	r3, [r4, #12]
 80038f8:	bf18      	it	ne
 80038fa:	81a3      	strhne	r3, [r4, #12]
 80038fc:	bd10      	pop	{r4, pc}

080038fe <__sclose>:
 80038fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003902:	f000 b89d 	b.w	8003a40 <_close_r>

08003906 <__swbuf_r>:
 8003906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003908:	460e      	mov	r6, r1
 800390a:	4614      	mov	r4, r2
 800390c:	4605      	mov	r5, r0
 800390e:	b118      	cbz	r0, 8003918 <__swbuf_r+0x12>
 8003910:	6a03      	ldr	r3, [r0, #32]
 8003912:	b90b      	cbnz	r3, 8003918 <__swbuf_r+0x12>
 8003914:	f7ff ff0e 	bl	8003734 <__sinit>
 8003918:	69a3      	ldr	r3, [r4, #24]
 800391a:	60a3      	str	r3, [r4, #8]
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	071a      	lsls	r2, r3, #28
 8003920:	d501      	bpl.n	8003926 <__swbuf_r+0x20>
 8003922:	6923      	ldr	r3, [r4, #16]
 8003924:	b943      	cbnz	r3, 8003938 <__swbuf_r+0x32>
 8003926:	4621      	mov	r1, r4
 8003928:	4628      	mov	r0, r5
 800392a:	f000 f82b 	bl	8003984 <__swsetup_r>
 800392e:	b118      	cbz	r0, 8003938 <__swbuf_r+0x32>
 8003930:	f04f 37ff 	mov.w	r7, #4294967295
 8003934:	4638      	mov	r0, r7
 8003936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	6922      	ldr	r2, [r4, #16]
 800393c:	1a98      	subs	r0, r3, r2
 800393e:	6963      	ldr	r3, [r4, #20]
 8003940:	b2f6      	uxtb	r6, r6
 8003942:	4283      	cmp	r3, r0
 8003944:	4637      	mov	r7, r6
 8003946:	dc05      	bgt.n	8003954 <__swbuf_r+0x4e>
 8003948:	4621      	mov	r1, r4
 800394a:	4628      	mov	r0, r5
 800394c:	f000 fd36 	bl	80043bc <_fflush_r>
 8003950:	2800      	cmp	r0, #0
 8003952:	d1ed      	bne.n	8003930 <__swbuf_r+0x2a>
 8003954:	68a3      	ldr	r3, [r4, #8]
 8003956:	3b01      	subs	r3, #1
 8003958:	60a3      	str	r3, [r4, #8]
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	6022      	str	r2, [r4, #0]
 8003960:	701e      	strb	r6, [r3, #0]
 8003962:	6962      	ldr	r2, [r4, #20]
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	429a      	cmp	r2, r3
 8003968:	d004      	beq.n	8003974 <__swbuf_r+0x6e>
 800396a:	89a3      	ldrh	r3, [r4, #12]
 800396c:	07db      	lsls	r3, r3, #31
 800396e:	d5e1      	bpl.n	8003934 <__swbuf_r+0x2e>
 8003970:	2e0a      	cmp	r6, #10
 8003972:	d1df      	bne.n	8003934 <__swbuf_r+0x2e>
 8003974:	4621      	mov	r1, r4
 8003976:	4628      	mov	r0, r5
 8003978:	f000 fd20 	bl	80043bc <_fflush_r>
 800397c:	2800      	cmp	r0, #0
 800397e:	d0d9      	beq.n	8003934 <__swbuf_r+0x2e>
 8003980:	e7d6      	b.n	8003930 <__swbuf_r+0x2a>
	...

08003984 <__swsetup_r>:
 8003984:	b538      	push	{r3, r4, r5, lr}
 8003986:	4b29      	ldr	r3, [pc, #164]	@ (8003a2c <__swsetup_r+0xa8>)
 8003988:	4605      	mov	r5, r0
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	460c      	mov	r4, r1
 800398e:	b118      	cbz	r0, 8003998 <__swsetup_r+0x14>
 8003990:	6a03      	ldr	r3, [r0, #32]
 8003992:	b90b      	cbnz	r3, 8003998 <__swsetup_r+0x14>
 8003994:	f7ff fece 	bl	8003734 <__sinit>
 8003998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800399c:	0719      	lsls	r1, r3, #28
 800399e:	d422      	bmi.n	80039e6 <__swsetup_r+0x62>
 80039a0:	06da      	lsls	r2, r3, #27
 80039a2:	d407      	bmi.n	80039b4 <__swsetup_r+0x30>
 80039a4:	2209      	movs	r2, #9
 80039a6:	602a      	str	r2, [r5, #0]
 80039a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039ac:	81a3      	strh	r3, [r4, #12]
 80039ae:	f04f 30ff 	mov.w	r0, #4294967295
 80039b2:	e033      	b.n	8003a1c <__swsetup_r+0x98>
 80039b4:	0758      	lsls	r0, r3, #29
 80039b6:	d512      	bpl.n	80039de <__swsetup_r+0x5a>
 80039b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039ba:	b141      	cbz	r1, 80039ce <__swsetup_r+0x4a>
 80039bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039c0:	4299      	cmp	r1, r3
 80039c2:	d002      	beq.n	80039ca <__swsetup_r+0x46>
 80039c4:	4628      	mov	r0, r5
 80039c6:	f000 f8af 	bl	8003b28 <_free_r>
 80039ca:	2300      	movs	r3, #0
 80039cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80039ce:	89a3      	ldrh	r3, [r4, #12]
 80039d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80039d4:	81a3      	strh	r3, [r4, #12]
 80039d6:	2300      	movs	r3, #0
 80039d8:	6063      	str	r3, [r4, #4]
 80039da:	6923      	ldr	r3, [r4, #16]
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	89a3      	ldrh	r3, [r4, #12]
 80039e0:	f043 0308 	orr.w	r3, r3, #8
 80039e4:	81a3      	strh	r3, [r4, #12]
 80039e6:	6923      	ldr	r3, [r4, #16]
 80039e8:	b94b      	cbnz	r3, 80039fe <__swsetup_r+0x7a>
 80039ea:	89a3      	ldrh	r3, [r4, #12]
 80039ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80039f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039f4:	d003      	beq.n	80039fe <__swsetup_r+0x7a>
 80039f6:	4621      	mov	r1, r4
 80039f8:	4628      	mov	r0, r5
 80039fa:	f000 fd2d 	bl	8004458 <__smakebuf_r>
 80039fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a02:	f013 0201 	ands.w	r2, r3, #1
 8003a06:	d00a      	beq.n	8003a1e <__swsetup_r+0x9a>
 8003a08:	2200      	movs	r2, #0
 8003a0a:	60a2      	str	r2, [r4, #8]
 8003a0c:	6962      	ldr	r2, [r4, #20]
 8003a0e:	4252      	negs	r2, r2
 8003a10:	61a2      	str	r2, [r4, #24]
 8003a12:	6922      	ldr	r2, [r4, #16]
 8003a14:	b942      	cbnz	r2, 8003a28 <__swsetup_r+0xa4>
 8003a16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a1a:	d1c5      	bne.n	80039a8 <__swsetup_r+0x24>
 8003a1c:	bd38      	pop	{r3, r4, r5, pc}
 8003a1e:	0799      	lsls	r1, r3, #30
 8003a20:	bf58      	it	pl
 8003a22:	6962      	ldrpl	r2, [r4, #20]
 8003a24:	60a2      	str	r2, [r4, #8]
 8003a26:	e7f4      	b.n	8003a12 <__swsetup_r+0x8e>
 8003a28:	2000      	movs	r0, #0
 8003a2a:	e7f7      	b.n	8003a1c <__swsetup_r+0x98>
 8003a2c:	20000018 	.word	0x20000018

08003a30 <memset>:
 8003a30:	4402      	add	r2, r0
 8003a32:	4603      	mov	r3, r0
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d100      	bne.n	8003a3a <memset+0xa>
 8003a38:	4770      	bx	lr
 8003a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3e:	e7f9      	b.n	8003a34 <memset+0x4>

08003a40 <_close_r>:
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	4d06      	ldr	r5, [pc, #24]	@ (8003a5c <_close_r+0x1c>)
 8003a44:	2300      	movs	r3, #0
 8003a46:	4604      	mov	r4, r0
 8003a48:	4608      	mov	r0, r1
 8003a4a:	602b      	str	r3, [r5, #0]
 8003a4c:	f7fd f8ec 	bl	8000c28 <_close>
 8003a50:	1c43      	adds	r3, r0, #1
 8003a52:	d102      	bne.n	8003a5a <_close_r+0x1a>
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	b103      	cbz	r3, 8003a5a <_close_r+0x1a>
 8003a58:	6023      	str	r3, [r4, #0]
 8003a5a:	bd38      	pop	{r3, r4, r5, pc}
 8003a5c:	20000264 	.word	0x20000264

08003a60 <_lseek_r>:
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	4d07      	ldr	r5, [pc, #28]	@ (8003a80 <_lseek_r+0x20>)
 8003a64:	4604      	mov	r4, r0
 8003a66:	4608      	mov	r0, r1
 8003a68:	4611      	mov	r1, r2
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	602a      	str	r2, [r5, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f7fd f901 	bl	8000c76 <_lseek>
 8003a74:	1c43      	adds	r3, r0, #1
 8003a76:	d102      	bne.n	8003a7e <_lseek_r+0x1e>
 8003a78:	682b      	ldr	r3, [r5, #0]
 8003a7a:	b103      	cbz	r3, 8003a7e <_lseek_r+0x1e>
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	bd38      	pop	{r3, r4, r5, pc}
 8003a80:	20000264 	.word	0x20000264

08003a84 <_read_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4d07      	ldr	r5, [pc, #28]	@ (8003aa4 <_read_r+0x20>)
 8003a88:	4604      	mov	r4, r0
 8003a8a:	4608      	mov	r0, r1
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	2200      	movs	r2, #0
 8003a90:	602a      	str	r2, [r5, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	f7fd f8ab 	bl	8000bee <_read>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d102      	bne.n	8003aa2 <_read_r+0x1e>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	b103      	cbz	r3, 8003aa2 <_read_r+0x1e>
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	20000264 	.word	0x20000264

08003aa8 <_write_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	4d07      	ldr	r5, [pc, #28]	@ (8003ac8 <_write_r+0x20>)
 8003aac:	4604      	mov	r4, r0
 8003aae:	4608      	mov	r0, r1
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	602a      	str	r2, [r5, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f7fc ff62 	bl	8000980 <_write>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d102      	bne.n	8003ac6 <_write_r+0x1e>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	b103      	cbz	r3, 8003ac6 <_write_r+0x1e>
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	20000264 	.word	0x20000264

08003acc <__errno>:
 8003acc:	4b01      	ldr	r3, [pc, #4]	@ (8003ad4 <__errno+0x8>)
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000018 	.word	0x20000018

08003ad8 <__libc_init_array>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	4d0d      	ldr	r5, [pc, #52]	@ (8003b10 <__libc_init_array+0x38>)
 8003adc:	4c0d      	ldr	r4, [pc, #52]	@ (8003b14 <__libc_init_array+0x3c>)
 8003ade:	1b64      	subs	r4, r4, r5
 8003ae0:	10a4      	asrs	r4, r4, #2
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	42a6      	cmp	r6, r4
 8003ae6:	d109      	bne.n	8003afc <__libc_init_array+0x24>
 8003ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8003b18 <__libc_init_array+0x40>)
 8003aea:	4c0c      	ldr	r4, [pc, #48]	@ (8003b1c <__libc_init_array+0x44>)
 8003aec:	f000 fd22 	bl	8004534 <_init>
 8003af0:	1b64      	subs	r4, r4, r5
 8003af2:	10a4      	asrs	r4, r4, #2
 8003af4:	2600      	movs	r6, #0
 8003af6:	42a6      	cmp	r6, r4
 8003af8:	d105      	bne.n	8003b06 <__libc_init_array+0x2e>
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b00:	4798      	blx	r3
 8003b02:	3601      	adds	r6, #1
 8003b04:	e7ee      	b.n	8003ae4 <__libc_init_array+0xc>
 8003b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0a:	4798      	blx	r3
 8003b0c:	3601      	adds	r6, #1
 8003b0e:	e7f2      	b.n	8003af6 <__libc_init_array+0x1e>
 8003b10:	0800461c 	.word	0x0800461c
 8003b14:	0800461c 	.word	0x0800461c
 8003b18:	0800461c 	.word	0x0800461c
 8003b1c:	08004620 	.word	0x08004620

08003b20 <__retarget_lock_init_recursive>:
 8003b20:	4770      	bx	lr

08003b22 <__retarget_lock_acquire_recursive>:
 8003b22:	4770      	bx	lr

08003b24 <__retarget_lock_release_recursive>:
 8003b24:	4770      	bx	lr
	...

08003b28 <_free_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	2900      	cmp	r1, #0
 8003b2e:	d041      	beq.n	8003bb4 <_free_r+0x8c>
 8003b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b34:	1f0c      	subs	r4, r1, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bfb8      	it	lt
 8003b3a:	18e4      	addlt	r4, r4, r3
 8003b3c:	f000 f8e0 	bl	8003d00 <__malloc_lock>
 8003b40:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <_free_r+0x90>)
 8003b42:	6813      	ldr	r3, [r2, #0]
 8003b44:	b933      	cbnz	r3, 8003b54 <_free_r+0x2c>
 8003b46:	6063      	str	r3, [r4, #4]
 8003b48:	6014      	str	r4, [r2, #0]
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b50:	f000 b8dc 	b.w	8003d0c <__malloc_unlock>
 8003b54:	42a3      	cmp	r3, r4
 8003b56:	d908      	bls.n	8003b6a <_free_r+0x42>
 8003b58:	6820      	ldr	r0, [r4, #0]
 8003b5a:	1821      	adds	r1, r4, r0
 8003b5c:	428b      	cmp	r3, r1
 8003b5e:	bf01      	itttt	eq
 8003b60:	6819      	ldreq	r1, [r3, #0]
 8003b62:	685b      	ldreq	r3, [r3, #4]
 8003b64:	1809      	addeq	r1, r1, r0
 8003b66:	6021      	streq	r1, [r4, #0]
 8003b68:	e7ed      	b.n	8003b46 <_free_r+0x1e>
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	b10b      	cbz	r3, 8003b74 <_free_r+0x4c>
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	d9fa      	bls.n	8003b6a <_free_r+0x42>
 8003b74:	6811      	ldr	r1, [r2, #0]
 8003b76:	1850      	adds	r0, r2, r1
 8003b78:	42a0      	cmp	r0, r4
 8003b7a:	d10b      	bne.n	8003b94 <_free_r+0x6c>
 8003b7c:	6820      	ldr	r0, [r4, #0]
 8003b7e:	4401      	add	r1, r0
 8003b80:	1850      	adds	r0, r2, r1
 8003b82:	4283      	cmp	r3, r0
 8003b84:	6011      	str	r1, [r2, #0]
 8003b86:	d1e0      	bne.n	8003b4a <_free_r+0x22>
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	6053      	str	r3, [r2, #4]
 8003b8e:	4408      	add	r0, r1
 8003b90:	6010      	str	r0, [r2, #0]
 8003b92:	e7da      	b.n	8003b4a <_free_r+0x22>
 8003b94:	d902      	bls.n	8003b9c <_free_r+0x74>
 8003b96:	230c      	movs	r3, #12
 8003b98:	602b      	str	r3, [r5, #0]
 8003b9a:	e7d6      	b.n	8003b4a <_free_r+0x22>
 8003b9c:	6820      	ldr	r0, [r4, #0]
 8003b9e:	1821      	adds	r1, r4, r0
 8003ba0:	428b      	cmp	r3, r1
 8003ba2:	bf04      	itt	eq
 8003ba4:	6819      	ldreq	r1, [r3, #0]
 8003ba6:	685b      	ldreq	r3, [r3, #4]
 8003ba8:	6063      	str	r3, [r4, #4]
 8003baa:	bf04      	itt	eq
 8003bac:	1809      	addeq	r1, r1, r0
 8003bae:	6021      	streq	r1, [r4, #0]
 8003bb0:	6054      	str	r4, [r2, #4]
 8003bb2:	e7ca      	b.n	8003b4a <_free_r+0x22>
 8003bb4:	bd38      	pop	{r3, r4, r5, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000270 	.word	0x20000270

08003bbc <sbrk_aligned>:
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	4e0f      	ldr	r6, [pc, #60]	@ (8003bfc <sbrk_aligned+0x40>)
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	6831      	ldr	r1, [r6, #0]
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	b911      	cbnz	r1, 8003bce <sbrk_aligned+0x12>
 8003bc8:	f000 fca4 	bl	8004514 <_sbrk_r>
 8003bcc:	6030      	str	r0, [r6, #0]
 8003bce:	4621      	mov	r1, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f000 fc9f 	bl	8004514 <_sbrk_r>
 8003bd6:	1c43      	adds	r3, r0, #1
 8003bd8:	d103      	bne.n	8003be2 <sbrk_aligned+0x26>
 8003bda:	f04f 34ff 	mov.w	r4, #4294967295
 8003bde:	4620      	mov	r0, r4
 8003be0:	bd70      	pop	{r4, r5, r6, pc}
 8003be2:	1cc4      	adds	r4, r0, #3
 8003be4:	f024 0403 	bic.w	r4, r4, #3
 8003be8:	42a0      	cmp	r0, r4
 8003bea:	d0f8      	beq.n	8003bde <sbrk_aligned+0x22>
 8003bec:	1a21      	subs	r1, r4, r0
 8003bee:	4628      	mov	r0, r5
 8003bf0:	f000 fc90 	bl	8004514 <_sbrk_r>
 8003bf4:	3001      	adds	r0, #1
 8003bf6:	d1f2      	bne.n	8003bde <sbrk_aligned+0x22>
 8003bf8:	e7ef      	b.n	8003bda <sbrk_aligned+0x1e>
 8003bfa:	bf00      	nop
 8003bfc:	2000026c 	.word	0x2000026c

08003c00 <_malloc_r>:
 8003c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c04:	1ccd      	adds	r5, r1, #3
 8003c06:	f025 0503 	bic.w	r5, r5, #3
 8003c0a:	3508      	adds	r5, #8
 8003c0c:	2d0c      	cmp	r5, #12
 8003c0e:	bf38      	it	cc
 8003c10:	250c      	movcc	r5, #12
 8003c12:	2d00      	cmp	r5, #0
 8003c14:	4606      	mov	r6, r0
 8003c16:	db01      	blt.n	8003c1c <_malloc_r+0x1c>
 8003c18:	42a9      	cmp	r1, r5
 8003c1a:	d904      	bls.n	8003c26 <_malloc_r+0x26>
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	6033      	str	r3, [r6, #0]
 8003c20:	2000      	movs	r0, #0
 8003c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cfc <_malloc_r+0xfc>
 8003c2a:	f000 f869 	bl	8003d00 <__malloc_lock>
 8003c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8003c32:	461c      	mov	r4, r3
 8003c34:	bb44      	cbnz	r4, 8003c88 <_malloc_r+0x88>
 8003c36:	4629      	mov	r1, r5
 8003c38:	4630      	mov	r0, r6
 8003c3a:	f7ff ffbf 	bl	8003bbc <sbrk_aligned>
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	4604      	mov	r4, r0
 8003c42:	d158      	bne.n	8003cf6 <_malloc_r+0xf6>
 8003c44:	f8d8 4000 	ldr.w	r4, [r8]
 8003c48:	4627      	mov	r7, r4
 8003c4a:	2f00      	cmp	r7, #0
 8003c4c:	d143      	bne.n	8003cd6 <_malloc_r+0xd6>
 8003c4e:	2c00      	cmp	r4, #0
 8003c50:	d04b      	beq.n	8003cea <_malloc_r+0xea>
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	4639      	mov	r1, r7
 8003c56:	4630      	mov	r0, r6
 8003c58:	eb04 0903 	add.w	r9, r4, r3
 8003c5c:	f000 fc5a 	bl	8004514 <_sbrk_r>
 8003c60:	4581      	cmp	r9, r0
 8003c62:	d142      	bne.n	8003cea <_malloc_r+0xea>
 8003c64:	6821      	ldr	r1, [r4, #0]
 8003c66:	1a6d      	subs	r5, r5, r1
 8003c68:	4629      	mov	r1, r5
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	f7ff ffa6 	bl	8003bbc <sbrk_aligned>
 8003c70:	3001      	adds	r0, #1
 8003c72:	d03a      	beq.n	8003cea <_malloc_r+0xea>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	442b      	add	r3, r5
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	bb62      	cbnz	r2, 8003cdc <_malloc_r+0xdc>
 8003c82:	f8c8 7000 	str.w	r7, [r8]
 8003c86:	e00f      	b.n	8003ca8 <_malloc_r+0xa8>
 8003c88:	6822      	ldr	r2, [r4, #0]
 8003c8a:	1b52      	subs	r2, r2, r5
 8003c8c:	d420      	bmi.n	8003cd0 <_malloc_r+0xd0>
 8003c8e:	2a0b      	cmp	r2, #11
 8003c90:	d917      	bls.n	8003cc2 <_malloc_r+0xc2>
 8003c92:	1961      	adds	r1, r4, r5
 8003c94:	42a3      	cmp	r3, r4
 8003c96:	6025      	str	r5, [r4, #0]
 8003c98:	bf18      	it	ne
 8003c9a:	6059      	strne	r1, [r3, #4]
 8003c9c:	6863      	ldr	r3, [r4, #4]
 8003c9e:	bf08      	it	eq
 8003ca0:	f8c8 1000 	streq.w	r1, [r8]
 8003ca4:	5162      	str	r2, [r4, r5]
 8003ca6:	604b      	str	r3, [r1, #4]
 8003ca8:	4630      	mov	r0, r6
 8003caa:	f000 f82f 	bl	8003d0c <__malloc_unlock>
 8003cae:	f104 000b 	add.w	r0, r4, #11
 8003cb2:	1d23      	adds	r3, r4, #4
 8003cb4:	f020 0007 	bic.w	r0, r0, #7
 8003cb8:	1ac2      	subs	r2, r0, r3
 8003cba:	bf1c      	itt	ne
 8003cbc:	1a1b      	subne	r3, r3, r0
 8003cbe:	50a3      	strne	r3, [r4, r2]
 8003cc0:	e7af      	b.n	8003c22 <_malloc_r+0x22>
 8003cc2:	6862      	ldr	r2, [r4, #4]
 8003cc4:	42a3      	cmp	r3, r4
 8003cc6:	bf0c      	ite	eq
 8003cc8:	f8c8 2000 	streq.w	r2, [r8]
 8003ccc:	605a      	strne	r2, [r3, #4]
 8003cce:	e7eb      	b.n	8003ca8 <_malloc_r+0xa8>
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	6864      	ldr	r4, [r4, #4]
 8003cd4:	e7ae      	b.n	8003c34 <_malloc_r+0x34>
 8003cd6:	463c      	mov	r4, r7
 8003cd8:	687f      	ldr	r7, [r7, #4]
 8003cda:	e7b6      	b.n	8003c4a <_malloc_r+0x4a>
 8003cdc:	461a      	mov	r2, r3
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	d1fb      	bne.n	8003cdc <_malloc_r+0xdc>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	6053      	str	r3, [r2, #4]
 8003ce8:	e7de      	b.n	8003ca8 <_malloc_r+0xa8>
 8003cea:	230c      	movs	r3, #12
 8003cec:	6033      	str	r3, [r6, #0]
 8003cee:	4630      	mov	r0, r6
 8003cf0:	f000 f80c 	bl	8003d0c <__malloc_unlock>
 8003cf4:	e794      	b.n	8003c20 <_malloc_r+0x20>
 8003cf6:	6005      	str	r5, [r0, #0]
 8003cf8:	e7d6      	b.n	8003ca8 <_malloc_r+0xa8>
 8003cfa:	bf00      	nop
 8003cfc:	20000270 	.word	0x20000270

08003d00 <__malloc_lock>:
 8003d00:	4801      	ldr	r0, [pc, #4]	@ (8003d08 <__malloc_lock+0x8>)
 8003d02:	f7ff bf0e 	b.w	8003b22 <__retarget_lock_acquire_recursive>
 8003d06:	bf00      	nop
 8003d08:	20000268 	.word	0x20000268

08003d0c <__malloc_unlock>:
 8003d0c:	4801      	ldr	r0, [pc, #4]	@ (8003d14 <__malloc_unlock+0x8>)
 8003d0e:	f7ff bf09 	b.w	8003b24 <__retarget_lock_release_recursive>
 8003d12:	bf00      	nop
 8003d14:	20000268 	.word	0x20000268

08003d18 <__sfputc_r>:
 8003d18:	6893      	ldr	r3, [r2, #8]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	b410      	push	{r4}
 8003d20:	6093      	str	r3, [r2, #8]
 8003d22:	da08      	bge.n	8003d36 <__sfputc_r+0x1e>
 8003d24:	6994      	ldr	r4, [r2, #24]
 8003d26:	42a3      	cmp	r3, r4
 8003d28:	db01      	blt.n	8003d2e <__sfputc_r+0x16>
 8003d2a:	290a      	cmp	r1, #10
 8003d2c:	d103      	bne.n	8003d36 <__sfputc_r+0x1e>
 8003d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d32:	f7ff bde8 	b.w	8003906 <__swbuf_r>
 8003d36:	6813      	ldr	r3, [r2, #0]
 8003d38:	1c58      	adds	r0, r3, #1
 8003d3a:	6010      	str	r0, [r2, #0]
 8003d3c:	7019      	strb	r1, [r3, #0]
 8003d3e:	4608      	mov	r0, r1
 8003d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <__sfputs_r>:
 8003d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d48:	4606      	mov	r6, r0
 8003d4a:	460f      	mov	r7, r1
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	18d5      	adds	r5, r2, r3
 8003d50:	42ac      	cmp	r4, r5
 8003d52:	d101      	bne.n	8003d58 <__sfputs_r+0x12>
 8003d54:	2000      	movs	r0, #0
 8003d56:	e007      	b.n	8003d68 <__sfputs_r+0x22>
 8003d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d5c:	463a      	mov	r2, r7
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f7ff ffda 	bl	8003d18 <__sfputc_r>
 8003d64:	1c43      	adds	r3, r0, #1
 8003d66:	d1f3      	bne.n	8003d50 <__sfputs_r+0xa>
 8003d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d6c <_vfiprintf_r>:
 8003d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	460d      	mov	r5, r1
 8003d72:	b09d      	sub	sp, #116	@ 0x74
 8003d74:	4614      	mov	r4, r2
 8003d76:	4698      	mov	r8, r3
 8003d78:	4606      	mov	r6, r0
 8003d7a:	b118      	cbz	r0, 8003d84 <_vfiprintf_r+0x18>
 8003d7c:	6a03      	ldr	r3, [r0, #32]
 8003d7e:	b90b      	cbnz	r3, 8003d84 <_vfiprintf_r+0x18>
 8003d80:	f7ff fcd8 	bl	8003734 <__sinit>
 8003d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d86:	07d9      	lsls	r1, r3, #31
 8003d88:	d405      	bmi.n	8003d96 <_vfiprintf_r+0x2a>
 8003d8a:	89ab      	ldrh	r3, [r5, #12]
 8003d8c:	059a      	lsls	r2, r3, #22
 8003d8e:	d402      	bmi.n	8003d96 <_vfiprintf_r+0x2a>
 8003d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d92:	f7ff fec6 	bl	8003b22 <__retarget_lock_acquire_recursive>
 8003d96:	89ab      	ldrh	r3, [r5, #12]
 8003d98:	071b      	lsls	r3, r3, #28
 8003d9a:	d501      	bpl.n	8003da0 <_vfiprintf_r+0x34>
 8003d9c:	692b      	ldr	r3, [r5, #16]
 8003d9e:	b99b      	cbnz	r3, 8003dc8 <_vfiprintf_r+0x5c>
 8003da0:	4629      	mov	r1, r5
 8003da2:	4630      	mov	r0, r6
 8003da4:	f7ff fdee 	bl	8003984 <__swsetup_r>
 8003da8:	b170      	cbz	r0, 8003dc8 <_vfiprintf_r+0x5c>
 8003daa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003dac:	07dc      	lsls	r4, r3, #31
 8003dae:	d504      	bpl.n	8003dba <_vfiprintf_r+0x4e>
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295
 8003db4:	b01d      	add	sp, #116	@ 0x74
 8003db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dba:	89ab      	ldrh	r3, [r5, #12]
 8003dbc:	0598      	lsls	r0, r3, #22
 8003dbe:	d4f7      	bmi.n	8003db0 <_vfiprintf_r+0x44>
 8003dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003dc2:	f7ff feaf 	bl	8003b24 <__retarget_lock_release_recursive>
 8003dc6:	e7f3      	b.n	8003db0 <_vfiprintf_r+0x44>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dcc:	2320      	movs	r3, #32
 8003dce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dd6:	2330      	movs	r3, #48	@ 0x30
 8003dd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003f88 <_vfiprintf_r+0x21c>
 8003ddc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003de0:	f04f 0901 	mov.w	r9, #1
 8003de4:	4623      	mov	r3, r4
 8003de6:	469a      	mov	sl, r3
 8003de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dec:	b10a      	cbz	r2, 8003df2 <_vfiprintf_r+0x86>
 8003dee:	2a25      	cmp	r2, #37	@ 0x25
 8003df0:	d1f9      	bne.n	8003de6 <_vfiprintf_r+0x7a>
 8003df2:	ebba 0b04 	subs.w	fp, sl, r4
 8003df6:	d00b      	beq.n	8003e10 <_vfiprintf_r+0xa4>
 8003df8:	465b      	mov	r3, fp
 8003dfa:	4622      	mov	r2, r4
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	4630      	mov	r0, r6
 8003e00:	f7ff ffa1 	bl	8003d46 <__sfputs_r>
 8003e04:	3001      	adds	r0, #1
 8003e06:	f000 80a7 	beq.w	8003f58 <_vfiprintf_r+0x1ec>
 8003e0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e0c:	445a      	add	r2, fp
 8003e0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e10:	f89a 3000 	ldrb.w	r3, [sl]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 809f 	beq.w	8003f58 <_vfiprintf_r+0x1ec>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e24:	f10a 0a01 	add.w	sl, sl, #1
 8003e28:	9304      	str	r3, [sp, #16]
 8003e2a:	9307      	str	r3, [sp, #28]
 8003e2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e30:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e32:	4654      	mov	r4, sl
 8003e34:	2205      	movs	r2, #5
 8003e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3a:	4853      	ldr	r0, [pc, #332]	@ (8003f88 <_vfiprintf_r+0x21c>)
 8003e3c:	f7fc f9d0 	bl	80001e0 <memchr>
 8003e40:	9a04      	ldr	r2, [sp, #16]
 8003e42:	b9d8      	cbnz	r0, 8003e7c <_vfiprintf_r+0x110>
 8003e44:	06d1      	lsls	r1, r2, #27
 8003e46:	bf44      	itt	mi
 8003e48:	2320      	movmi	r3, #32
 8003e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e4e:	0713      	lsls	r3, r2, #28
 8003e50:	bf44      	itt	mi
 8003e52:	232b      	movmi	r3, #43	@ 0x2b
 8003e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e58:	f89a 3000 	ldrb.w	r3, [sl]
 8003e5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e5e:	d015      	beq.n	8003e8c <_vfiprintf_r+0x120>
 8003e60:	9a07      	ldr	r2, [sp, #28]
 8003e62:	4654      	mov	r4, sl
 8003e64:	2000      	movs	r0, #0
 8003e66:	f04f 0c0a 	mov.w	ip, #10
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e70:	3b30      	subs	r3, #48	@ 0x30
 8003e72:	2b09      	cmp	r3, #9
 8003e74:	d94b      	bls.n	8003f0e <_vfiprintf_r+0x1a2>
 8003e76:	b1b0      	cbz	r0, 8003ea6 <_vfiprintf_r+0x13a>
 8003e78:	9207      	str	r2, [sp, #28]
 8003e7a:	e014      	b.n	8003ea6 <_vfiprintf_r+0x13a>
 8003e7c:	eba0 0308 	sub.w	r3, r0, r8
 8003e80:	fa09 f303 	lsl.w	r3, r9, r3
 8003e84:	4313      	orrs	r3, r2
 8003e86:	9304      	str	r3, [sp, #16]
 8003e88:	46a2      	mov	sl, r4
 8003e8a:	e7d2      	b.n	8003e32 <_vfiprintf_r+0xc6>
 8003e8c:	9b03      	ldr	r3, [sp, #12]
 8003e8e:	1d19      	adds	r1, r3, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	9103      	str	r1, [sp, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bfbb      	ittet	lt
 8003e98:	425b      	neglt	r3, r3
 8003e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8003e9e:	9307      	strge	r3, [sp, #28]
 8003ea0:	9307      	strlt	r3, [sp, #28]
 8003ea2:	bfb8      	it	lt
 8003ea4:	9204      	strlt	r2, [sp, #16]
 8003ea6:	7823      	ldrb	r3, [r4, #0]
 8003ea8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003eaa:	d10a      	bne.n	8003ec2 <_vfiprintf_r+0x156>
 8003eac:	7863      	ldrb	r3, [r4, #1]
 8003eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8003eb0:	d132      	bne.n	8003f18 <_vfiprintf_r+0x1ac>
 8003eb2:	9b03      	ldr	r3, [sp, #12]
 8003eb4:	1d1a      	adds	r2, r3, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	9203      	str	r2, [sp, #12]
 8003eba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ebe:	3402      	adds	r4, #2
 8003ec0:	9305      	str	r3, [sp, #20]
 8003ec2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003f98 <_vfiprintf_r+0x22c>
 8003ec6:	7821      	ldrb	r1, [r4, #0]
 8003ec8:	2203      	movs	r2, #3
 8003eca:	4650      	mov	r0, sl
 8003ecc:	f7fc f988 	bl	80001e0 <memchr>
 8003ed0:	b138      	cbz	r0, 8003ee2 <_vfiprintf_r+0x176>
 8003ed2:	9b04      	ldr	r3, [sp, #16]
 8003ed4:	eba0 000a 	sub.w	r0, r0, sl
 8003ed8:	2240      	movs	r2, #64	@ 0x40
 8003eda:	4082      	lsls	r2, r0
 8003edc:	4313      	orrs	r3, r2
 8003ede:	3401      	adds	r4, #1
 8003ee0:	9304      	str	r3, [sp, #16]
 8003ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee6:	4829      	ldr	r0, [pc, #164]	@ (8003f8c <_vfiprintf_r+0x220>)
 8003ee8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003eec:	2206      	movs	r2, #6
 8003eee:	f7fc f977 	bl	80001e0 <memchr>
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	d03f      	beq.n	8003f76 <_vfiprintf_r+0x20a>
 8003ef6:	4b26      	ldr	r3, [pc, #152]	@ (8003f90 <_vfiprintf_r+0x224>)
 8003ef8:	bb1b      	cbnz	r3, 8003f42 <_vfiprintf_r+0x1d6>
 8003efa:	9b03      	ldr	r3, [sp, #12]
 8003efc:	3307      	adds	r3, #7
 8003efe:	f023 0307 	bic.w	r3, r3, #7
 8003f02:	3308      	adds	r3, #8
 8003f04:	9303      	str	r3, [sp, #12]
 8003f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f08:	443b      	add	r3, r7
 8003f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f0c:	e76a      	b.n	8003de4 <_vfiprintf_r+0x78>
 8003f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f12:	460c      	mov	r4, r1
 8003f14:	2001      	movs	r0, #1
 8003f16:	e7a8      	b.n	8003e6a <_vfiprintf_r+0xfe>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	3401      	adds	r4, #1
 8003f1c:	9305      	str	r3, [sp, #20]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f04f 0c0a 	mov.w	ip, #10
 8003f24:	4620      	mov	r0, r4
 8003f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f2a:	3a30      	subs	r2, #48	@ 0x30
 8003f2c:	2a09      	cmp	r2, #9
 8003f2e:	d903      	bls.n	8003f38 <_vfiprintf_r+0x1cc>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0c6      	beq.n	8003ec2 <_vfiprintf_r+0x156>
 8003f34:	9105      	str	r1, [sp, #20]
 8003f36:	e7c4      	b.n	8003ec2 <_vfiprintf_r+0x156>
 8003f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f3c:	4604      	mov	r4, r0
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e7f0      	b.n	8003f24 <_vfiprintf_r+0x1b8>
 8003f42:	ab03      	add	r3, sp, #12
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	462a      	mov	r2, r5
 8003f48:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <_vfiprintf_r+0x228>)
 8003f4a:	a904      	add	r1, sp, #16
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f3af 8000 	nop.w
 8003f52:	4607      	mov	r7, r0
 8003f54:	1c78      	adds	r0, r7, #1
 8003f56:	d1d6      	bne.n	8003f06 <_vfiprintf_r+0x19a>
 8003f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f5a:	07d9      	lsls	r1, r3, #31
 8003f5c:	d405      	bmi.n	8003f6a <_vfiprintf_r+0x1fe>
 8003f5e:	89ab      	ldrh	r3, [r5, #12]
 8003f60:	059a      	lsls	r2, r3, #22
 8003f62:	d402      	bmi.n	8003f6a <_vfiprintf_r+0x1fe>
 8003f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f66:	f7ff fddd 	bl	8003b24 <__retarget_lock_release_recursive>
 8003f6a:	89ab      	ldrh	r3, [r5, #12]
 8003f6c:	065b      	lsls	r3, r3, #25
 8003f6e:	f53f af1f 	bmi.w	8003db0 <_vfiprintf_r+0x44>
 8003f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f74:	e71e      	b.n	8003db4 <_vfiprintf_r+0x48>
 8003f76:	ab03      	add	r3, sp, #12
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	462a      	mov	r2, r5
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <_vfiprintf_r+0x228>)
 8003f7e:	a904      	add	r1, sp, #16
 8003f80:	4630      	mov	r0, r6
 8003f82:	f000 f879 	bl	8004078 <_printf_i>
 8003f86:	e7e4      	b.n	8003f52 <_vfiprintf_r+0x1e6>
 8003f88:	080045e0 	.word	0x080045e0
 8003f8c:	080045ea 	.word	0x080045ea
 8003f90:	00000000 	.word	0x00000000
 8003f94:	08003d47 	.word	0x08003d47
 8003f98:	080045e6 	.word	0x080045e6

08003f9c <_printf_common>:
 8003f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa0:	4616      	mov	r6, r2
 8003fa2:	4698      	mov	r8, r3
 8003fa4:	688a      	ldr	r2, [r1, #8]
 8003fa6:	690b      	ldr	r3, [r1, #16]
 8003fa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fac:	4293      	cmp	r3, r2
 8003fae:	bfb8      	it	lt
 8003fb0:	4613      	movlt	r3, r2
 8003fb2:	6033      	str	r3, [r6, #0]
 8003fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fb8:	4607      	mov	r7, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	b10a      	cbz	r2, 8003fc2 <_printf_common+0x26>
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	6033      	str	r3, [r6, #0]
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	0699      	lsls	r1, r3, #26
 8003fc6:	bf42      	ittt	mi
 8003fc8:	6833      	ldrmi	r3, [r6, #0]
 8003fca:	3302      	addmi	r3, #2
 8003fcc:	6033      	strmi	r3, [r6, #0]
 8003fce:	6825      	ldr	r5, [r4, #0]
 8003fd0:	f015 0506 	ands.w	r5, r5, #6
 8003fd4:	d106      	bne.n	8003fe4 <_printf_common+0x48>
 8003fd6:	f104 0a19 	add.w	sl, r4, #25
 8003fda:	68e3      	ldr	r3, [r4, #12]
 8003fdc:	6832      	ldr	r2, [r6, #0]
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	42ab      	cmp	r3, r5
 8003fe2:	dc26      	bgt.n	8004032 <_printf_common+0x96>
 8003fe4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fe8:	6822      	ldr	r2, [r4, #0]
 8003fea:	3b00      	subs	r3, #0
 8003fec:	bf18      	it	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	0692      	lsls	r2, r2, #26
 8003ff2:	d42b      	bmi.n	800404c <_printf_common+0xb0>
 8003ff4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	47c8      	blx	r9
 8003ffe:	3001      	adds	r0, #1
 8004000:	d01e      	beq.n	8004040 <_printf_common+0xa4>
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	6922      	ldr	r2, [r4, #16]
 8004006:	f003 0306 	and.w	r3, r3, #6
 800400a:	2b04      	cmp	r3, #4
 800400c:	bf02      	ittt	eq
 800400e:	68e5      	ldreq	r5, [r4, #12]
 8004010:	6833      	ldreq	r3, [r6, #0]
 8004012:	1aed      	subeq	r5, r5, r3
 8004014:	68a3      	ldr	r3, [r4, #8]
 8004016:	bf0c      	ite	eq
 8004018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800401c:	2500      	movne	r5, #0
 800401e:	4293      	cmp	r3, r2
 8004020:	bfc4      	itt	gt
 8004022:	1a9b      	subgt	r3, r3, r2
 8004024:	18ed      	addgt	r5, r5, r3
 8004026:	2600      	movs	r6, #0
 8004028:	341a      	adds	r4, #26
 800402a:	42b5      	cmp	r5, r6
 800402c:	d11a      	bne.n	8004064 <_printf_common+0xc8>
 800402e:	2000      	movs	r0, #0
 8004030:	e008      	b.n	8004044 <_printf_common+0xa8>
 8004032:	2301      	movs	r3, #1
 8004034:	4652      	mov	r2, sl
 8004036:	4641      	mov	r1, r8
 8004038:	4638      	mov	r0, r7
 800403a:	47c8      	blx	r9
 800403c:	3001      	adds	r0, #1
 800403e:	d103      	bne.n	8004048 <_printf_common+0xac>
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004048:	3501      	adds	r5, #1
 800404a:	e7c6      	b.n	8003fda <_printf_common+0x3e>
 800404c:	18e1      	adds	r1, r4, r3
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	2030      	movs	r0, #48	@ 0x30
 8004052:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004056:	4422      	add	r2, r4
 8004058:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800405c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004060:	3302      	adds	r3, #2
 8004062:	e7c7      	b.n	8003ff4 <_printf_common+0x58>
 8004064:	2301      	movs	r3, #1
 8004066:	4622      	mov	r2, r4
 8004068:	4641      	mov	r1, r8
 800406a:	4638      	mov	r0, r7
 800406c:	47c8      	blx	r9
 800406e:	3001      	adds	r0, #1
 8004070:	d0e6      	beq.n	8004040 <_printf_common+0xa4>
 8004072:	3601      	adds	r6, #1
 8004074:	e7d9      	b.n	800402a <_printf_common+0x8e>
	...

08004078 <_printf_i>:
 8004078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800407c:	7e0f      	ldrb	r7, [r1, #24]
 800407e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004080:	2f78      	cmp	r7, #120	@ 0x78
 8004082:	4691      	mov	r9, r2
 8004084:	4680      	mov	r8, r0
 8004086:	460c      	mov	r4, r1
 8004088:	469a      	mov	sl, r3
 800408a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800408e:	d807      	bhi.n	80040a0 <_printf_i+0x28>
 8004090:	2f62      	cmp	r7, #98	@ 0x62
 8004092:	d80a      	bhi.n	80040aa <_printf_i+0x32>
 8004094:	2f00      	cmp	r7, #0
 8004096:	f000 80d1 	beq.w	800423c <_printf_i+0x1c4>
 800409a:	2f58      	cmp	r7, #88	@ 0x58
 800409c:	f000 80b8 	beq.w	8004210 <_printf_i+0x198>
 80040a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040a8:	e03a      	b.n	8004120 <_printf_i+0xa8>
 80040aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040ae:	2b15      	cmp	r3, #21
 80040b0:	d8f6      	bhi.n	80040a0 <_printf_i+0x28>
 80040b2:	a101      	add	r1, pc, #4	@ (adr r1, 80040b8 <_printf_i+0x40>)
 80040b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040b8:	08004111 	.word	0x08004111
 80040bc:	08004125 	.word	0x08004125
 80040c0:	080040a1 	.word	0x080040a1
 80040c4:	080040a1 	.word	0x080040a1
 80040c8:	080040a1 	.word	0x080040a1
 80040cc:	080040a1 	.word	0x080040a1
 80040d0:	08004125 	.word	0x08004125
 80040d4:	080040a1 	.word	0x080040a1
 80040d8:	080040a1 	.word	0x080040a1
 80040dc:	080040a1 	.word	0x080040a1
 80040e0:	080040a1 	.word	0x080040a1
 80040e4:	08004223 	.word	0x08004223
 80040e8:	0800414f 	.word	0x0800414f
 80040ec:	080041dd 	.word	0x080041dd
 80040f0:	080040a1 	.word	0x080040a1
 80040f4:	080040a1 	.word	0x080040a1
 80040f8:	08004245 	.word	0x08004245
 80040fc:	080040a1 	.word	0x080040a1
 8004100:	0800414f 	.word	0x0800414f
 8004104:	080040a1 	.word	0x080040a1
 8004108:	080040a1 	.word	0x080040a1
 800410c:	080041e5 	.word	0x080041e5
 8004110:	6833      	ldr	r3, [r6, #0]
 8004112:	1d1a      	adds	r2, r3, #4
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6032      	str	r2, [r6, #0]
 8004118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800411c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004120:	2301      	movs	r3, #1
 8004122:	e09c      	b.n	800425e <_printf_i+0x1e6>
 8004124:	6833      	ldr	r3, [r6, #0]
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	1d19      	adds	r1, r3, #4
 800412a:	6031      	str	r1, [r6, #0]
 800412c:	0606      	lsls	r6, r0, #24
 800412e:	d501      	bpl.n	8004134 <_printf_i+0xbc>
 8004130:	681d      	ldr	r5, [r3, #0]
 8004132:	e003      	b.n	800413c <_printf_i+0xc4>
 8004134:	0645      	lsls	r5, r0, #25
 8004136:	d5fb      	bpl.n	8004130 <_printf_i+0xb8>
 8004138:	f9b3 5000 	ldrsh.w	r5, [r3]
 800413c:	2d00      	cmp	r5, #0
 800413e:	da03      	bge.n	8004148 <_printf_i+0xd0>
 8004140:	232d      	movs	r3, #45	@ 0x2d
 8004142:	426d      	negs	r5, r5
 8004144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004148:	4858      	ldr	r0, [pc, #352]	@ (80042ac <_printf_i+0x234>)
 800414a:	230a      	movs	r3, #10
 800414c:	e011      	b.n	8004172 <_printf_i+0xfa>
 800414e:	6821      	ldr	r1, [r4, #0]
 8004150:	6833      	ldr	r3, [r6, #0]
 8004152:	0608      	lsls	r0, r1, #24
 8004154:	f853 5b04 	ldr.w	r5, [r3], #4
 8004158:	d402      	bmi.n	8004160 <_printf_i+0xe8>
 800415a:	0649      	lsls	r1, r1, #25
 800415c:	bf48      	it	mi
 800415e:	b2ad      	uxthmi	r5, r5
 8004160:	2f6f      	cmp	r7, #111	@ 0x6f
 8004162:	4852      	ldr	r0, [pc, #328]	@ (80042ac <_printf_i+0x234>)
 8004164:	6033      	str	r3, [r6, #0]
 8004166:	bf14      	ite	ne
 8004168:	230a      	movne	r3, #10
 800416a:	2308      	moveq	r3, #8
 800416c:	2100      	movs	r1, #0
 800416e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004172:	6866      	ldr	r6, [r4, #4]
 8004174:	60a6      	str	r6, [r4, #8]
 8004176:	2e00      	cmp	r6, #0
 8004178:	db05      	blt.n	8004186 <_printf_i+0x10e>
 800417a:	6821      	ldr	r1, [r4, #0]
 800417c:	432e      	orrs	r6, r5
 800417e:	f021 0104 	bic.w	r1, r1, #4
 8004182:	6021      	str	r1, [r4, #0]
 8004184:	d04b      	beq.n	800421e <_printf_i+0x1a6>
 8004186:	4616      	mov	r6, r2
 8004188:	fbb5 f1f3 	udiv	r1, r5, r3
 800418c:	fb03 5711 	mls	r7, r3, r1, r5
 8004190:	5dc7      	ldrb	r7, [r0, r7]
 8004192:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004196:	462f      	mov	r7, r5
 8004198:	42bb      	cmp	r3, r7
 800419a:	460d      	mov	r5, r1
 800419c:	d9f4      	bls.n	8004188 <_printf_i+0x110>
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d10b      	bne.n	80041ba <_printf_i+0x142>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	07df      	lsls	r7, r3, #31
 80041a6:	d508      	bpl.n	80041ba <_printf_i+0x142>
 80041a8:	6923      	ldr	r3, [r4, #16]
 80041aa:	6861      	ldr	r1, [r4, #4]
 80041ac:	4299      	cmp	r1, r3
 80041ae:	bfde      	ittt	le
 80041b0:	2330      	movle	r3, #48	@ 0x30
 80041b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041ba:	1b92      	subs	r2, r2, r6
 80041bc:	6122      	str	r2, [r4, #16]
 80041be:	f8cd a000 	str.w	sl, [sp]
 80041c2:	464b      	mov	r3, r9
 80041c4:	aa03      	add	r2, sp, #12
 80041c6:	4621      	mov	r1, r4
 80041c8:	4640      	mov	r0, r8
 80041ca:	f7ff fee7 	bl	8003f9c <_printf_common>
 80041ce:	3001      	adds	r0, #1
 80041d0:	d14a      	bne.n	8004268 <_printf_i+0x1f0>
 80041d2:	f04f 30ff 	mov.w	r0, #4294967295
 80041d6:	b004      	add	sp, #16
 80041d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	f043 0320 	orr.w	r3, r3, #32
 80041e2:	6023      	str	r3, [r4, #0]
 80041e4:	4832      	ldr	r0, [pc, #200]	@ (80042b0 <_printf_i+0x238>)
 80041e6:	2778      	movs	r7, #120	@ 0x78
 80041e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	6831      	ldr	r1, [r6, #0]
 80041f0:	061f      	lsls	r7, r3, #24
 80041f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80041f6:	d402      	bmi.n	80041fe <_printf_i+0x186>
 80041f8:	065f      	lsls	r7, r3, #25
 80041fa:	bf48      	it	mi
 80041fc:	b2ad      	uxthmi	r5, r5
 80041fe:	6031      	str	r1, [r6, #0]
 8004200:	07d9      	lsls	r1, r3, #31
 8004202:	bf44      	itt	mi
 8004204:	f043 0320 	orrmi.w	r3, r3, #32
 8004208:	6023      	strmi	r3, [r4, #0]
 800420a:	b11d      	cbz	r5, 8004214 <_printf_i+0x19c>
 800420c:	2310      	movs	r3, #16
 800420e:	e7ad      	b.n	800416c <_printf_i+0xf4>
 8004210:	4826      	ldr	r0, [pc, #152]	@ (80042ac <_printf_i+0x234>)
 8004212:	e7e9      	b.n	80041e8 <_printf_i+0x170>
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	f023 0320 	bic.w	r3, r3, #32
 800421a:	6023      	str	r3, [r4, #0]
 800421c:	e7f6      	b.n	800420c <_printf_i+0x194>
 800421e:	4616      	mov	r6, r2
 8004220:	e7bd      	b.n	800419e <_printf_i+0x126>
 8004222:	6833      	ldr	r3, [r6, #0]
 8004224:	6825      	ldr	r5, [r4, #0]
 8004226:	6961      	ldr	r1, [r4, #20]
 8004228:	1d18      	adds	r0, r3, #4
 800422a:	6030      	str	r0, [r6, #0]
 800422c:	062e      	lsls	r6, r5, #24
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	d501      	bpl.n	8004236 <_printf_i+0x1be>
 8004232:	6019      	str	r1, [r3, #0]
 8004234:	e002      	b.n	800423c <_printf_i+0x1c4>
 8004236:	0668      	lsls	r0, r5, #25
 8004238:	d5fb      	bpl.n	8004232 <_printf_i+0x1ba>
 800423a:	8019      	strh	r1, [r3, #0]
 800423c:	2300      	movs	r3, #0
 800423e:	6123      	str	r3, [r4, #16]
 8004240:	4616      	mov	r6, r2
 8004242:	e7bc      	b.n	80041be <_printf_i+0x146>
 8004244:	6833      	ldr	r3, [r6, #0]
 8004246:	1d1a      	adds	r2, r3, #4
 8004248:	6032      	str	r2, [r6, #0]
 800424a:	681e      	ldr	r6, [r3, #0]
 800424c:	6862      	ldr	r2, [r4, #4]
 800424e:	2100      	movs	r1, #0
 8004250:	4630      	mov	r0, r6
 8004252:	f7fb ffc5 	bl	80001e0 <memchr>
 8004256:	b108      	cbz	r0, 800425c <_printf_i+0x1e4>
 8004258:	1b80      	subs	r0, r0, r6
 800425a:	6060      	str	r0, [r4, #4]
 800425c:	6863      	ldr	r3, [r4, #4]
 800425e:	6123      	str	r3, [r4, #16]
 8004260:	2300      	movs	r3, #0
 8004262:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004266:	e7aa      	b.n	80041be <_printf_i+0x146>
 8004268:	6923      	ldr	r3, [r4, #16]
 800426a:	4632      	mov	r2, r6
 800426c:	4649      	mov	r1, r9
 800426e:	4640      	mov	r0, r8
 8004270:	47d0      	blx	sl
 8004272:	3001      	adds	r0, #1
 8004274:	d0ad      	beq.n	80041d2 <_printf_i+0x15a>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	079b      	lsls	r3, r3, #30
 800427a:	d413      	bmi.n	80042a4 <_printf_i+0x22c>
 800427c:	68e0      	ldr	r0, [r4, #12]
 800427e:	9b03      	ldr	r3, [sp, #12]
 8004280:	4298      	cmp	r0, r3
 8004282:	bfb8      	it	lt
 8004284:	4618      	movlt	r0, r3
 8004286:	e7a6      	b.n	80041d6 <_printf_i+0x15e>
 8004288:	2301      	movs	r3, #1
 800428a:	4632      	mov	r2, r6
 800428c:	4649      	mov	r1, r9
 800428e:	4640      	mov	r0, r8
 8004290:	47d0      	blx	sl
 8004292:	3001      	adds	r0, #1
 8004294:	d09d      	beq.n	80041d2 <_printf_i+0x15a>
 8004296:	3501      	adds	r5, #1
 8004298:	68e3      	ldr	r3, [r4, #12]
 800429a:	9903      	ldr	r1, [sp, #12]
 800429c:	1a5b      	subs	r3, r3, r1
 800429e:	42ab      	cmp	r3, r5
 80042a0:	dcf2      	bgt.n	8004288 <_printf_i+0x210>
 80042a2:	e7eb      	b.n	800427c <_printf_i+0x204>
 80042a4:	2500      	movs	r5, #0
 80042a6:	f104 0619 	add.w	r6, r4, #25
 80042aa:	e7f5      	b.n	8004298 <_printf_i+0x220>
 80042ac:	080045f1 	.word	0x080045f1
 80042b0:	08004602 	.word	0x08004602

080042b4 <__sflush_r>:
 80042b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042bc:	0716      	lsls	r6, r2, #28
 80042be:	4605      	mov	r5, r0
 80042c0:	460c      	mov	r4, r1
 80042c2:	d454      	bmi.n	800436e <__sflush_r+0xba>
 80042c4:	684b      	ldr	r3, [r1, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	dc02      	bgt.n	80042d0 <__sflush_r+0x1c>
 80042ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	dd48      	ble.n	8004362 <__sflush_r+0xae>
 80042d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042d2:	2e00      	cmp	r6, #0
 80042d4:	d045      	beq.n	8004362 <__sflush_r+0xae>
 80042d6:	2300      	movs	r3, #0
 80042d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80042dc:	682f      	ldr	r7, [r5, #0]
 80042de:	6a21      	ldr	r1, [r4, #32]
 80042e0:	602b      	str	r3, [r5, #0]
 80042e2:	d030      	beq.n	8004346 <__sflush_r+0x92>
 80042e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	0759      	lsls	r1, r3, #29
 80042ea:	d505      	bpl.n	80042f8 <__sflush_r+0x44>
 80042ec:	6863      	ldr	r3, [r4, #4]
 80042ee:	1ad2      	subs	r2, r2, r3
 80042f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80042f2:	b10b      	cbz	r3, 80042f8 <__sflush_r+0x44>
 80042f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042f6:	1ad2      	subs	r2, r2, r3
 80042f8:	2300      	movs	r3, #0
 80042fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042fc:	6a21      	ldr	r1, [r4, #32]
 80042fe:	4628      	mov	r0, r5
 8004300:	47b0      	blx	r6
 8004302:	1c43      	adds	r3, r0, #1
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	d106      	bne.n	8004316 <__sflush_r+0x62>
 8004308:	6829      	ldr	r1, [r5, #0]
 800430a:	291d      	cmp	r1, #29
 800430c:	d82b      	bhi.n	8004366 <__sflush_r+0xb2>
 800430e:	4a2a      	ldr	r2, [pc, #168]	@ (80043b8 <__sflush_r+0x104>)
 8004310:	40ca      	lsrs	r2, r1
 8004312:	07d6      	lsls	r6, r2, #31
 8004314:	d527      	bpl.n	8004366 <__sflush_r+0xb2>
 8004316:	2200      	movs	r2, #0
 8004318:	6062      	str	r2, [r4, #4]
 800431a:	04d9      	lsls	r1, r3, #19
 800431c:	6922      	ldr	r2, [r4, #16]
 800431e:	6022      	str	r2, [r4, #0]
 8004320:	d504      	bpl.n	800432c <__sflush_r+0x78>
 8004322:	1c42      	adds	r2, r0, #1
 8004324:	d101      	bne.n	800432a <__sflush_r+0x76>
 8004326:	682b      	ldr	r3, [r5, #0]
 8004328:	b903      	cbnz	r3, 800432c <__sflush_r+0x78>
 800432a:	6560      	str	r0, [r4, #84]	@ 0x54
 800432c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800432e:	602f      	str	r7, [r5, #0]
 8004330:	b1b9      	cbz	r1, 8004362 <__sflush_r+0xae>
 8004332:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004336:	4299      	cmp	r1, r3
 8004338:	d002      	beq.n	8004340 <__sflush_r+0x8c>
 800433a:	4628      	mov	r0, r5
 800433c:	f7ff fbf4 	bl	8003b28 <_free_r>
 8004340:	2300      	movs	r3, #0
 8004342:	6363      	str	r3, [r4, #52]	@ 0x34
 8004344:	e00d      	b.n	8004362 <__sflush_r+0xae>
 8004346:	2301      	movs	r3, #1
 8004348:	4628      	mov	r0, r5
 800434a:	47b0      	blx	r6
 800434c:	4602      	mov	r2, r0
 800434e:	1c50      	adds	r0, r2, #1
 8004350:	d1c9      	bne.n	80042e6 <__sflush_r+0x32>
 8004352:	682b      	ldr	r3, [r5, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0c6      	beq.n	80042e6 <__sflush_r+0x32>
 8004358:	2b1d      	cmp	r3, #29
 800435a:	d001      	beq.n	8004360 <__sflush_r+0xac>
 800435c:	2b16      	cmp	r3, #22
 800435e:	d11e      	bne.n	800439e <__sflush_r+0xea>
 8004360:	602f      	str	r7, [r5, #0]
 8004362:	2000      	movs	r0, #0
 8004364:	e022      	b.n	80043ac <__sflush_r+0xf8>
 8004366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800436a:	b21b      	sxth	r3, r3
 800436c:	e01b      	b.n	80043a6 <__sflush_r+0xf2>
 800436e:	690f      	ldr	r7, [r1, #16]
 8004370:	2f00      	cmp	r7, #0
 8004372:	d0f6      	beq.n	8004362 <__sflush_r+0xae>
 8004374:	0793      	lsls	r3, r2, #30
 8004376:	680e      	ldr	r6, [r1, #0]
 8004378:	bf08      	it	eq
 800437a:	694b      	ldreq	r3, [r1, #20]
 800437c:	600f      	str	r7, [r1, #0]
 800437e:	bf18      	it	ne
 8004380:	2300      	movne	r3, #0
 8004382:	eba6 0807 	sub.w	r8, r6, r7
 8004386:	608b      	str	r3, [r1, #8]
 8004388:	f1b8 0f00 	cmp.w	r8, #0
 800438c:	dde9      	ble.n	8004362 <__sflush_r+0xae>
 800438e:	6a21      	ldr	r1, [r4, #32]
 8004390:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004392:	4643      	mov	r3, r8
 8004394:	463a      	mov	r2, r7
 8004396:	4628      	mov	r0, r5
 8004398:	47b0      	blx	r6
 800439a:	2800      	cmp	r0, #0
 800439c:	dc08      	bgt.n	80043b0 <__sflush_r+0xfc>
 800439e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043a6:	81a3      	strh	r3, [r4, #12]
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043b0:	4407      	add	r7, r0
 80043b2:	eba8 0800 	sub.w	r8, r8, r0
 80043b6:	e7e7      	b.n	8004388 <__sflush_r+0xd4>
 80043b8:	20400001 	.word	0x20400001

080043bc <_fflush_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	690b      	ldr	r3, [r1, #16]
 80043c0:	4605      	mov	r5, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	b913      	cbnz	r3, 80043cc <_fflush_r+0x10>
 80043c6:	2500      	movs	r5, #0
 80043c8:	4628      	mov	r0, r5
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
 80043cc:	b118      	cbz	r0, 80043d6 <_fflush_r+0x1a>
 80043ce:	6a03      	ldr	r3, [r0, #32]
 80043d0:	b90b      	cbnz	r3, 80043d6 <_fflush_r+0x1a>
 80043d2:	f7ff f9af 	bl	8003734 <__sinit>
 80043d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f3      	beq.n	80043c6 <_fflush_r+0xa>
 80043de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80043e0:	07d0      	lsls	r0, r2, #31
 80043e2:	d404      	bmi.n	80043ee <_fflush_r+0x32>
 80043e4:	0599      	lsls	r1, r3, #22
 80043e6:	d402      	bmi.n	80043ee <_fflush_r+0x32>
 80043e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ea:	f7ff fb9a 	bl	8003b22 <__retarget_lock_acquire_recursive>
 80043ee:	4628      	mov	r0, r5
 80043f0:	4621      	mov	r1, r4
 80043f2:	f7ff ff5f 	bl	80042b4 <__sflush_r>
 80043f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043f8:	07da      	lsls	r2, r3, #31
 80043fa:	4605      	mov	r5, r0
 80043fc:	d4e4      	bmi.n	80043c8 <_fflush_r+0xc>
 80043fe:	89a3      	ldrh	r3, [r4, #12]
 8004400:	059b      	lsls	r3, r3, #22
 8004402:	d4e1      	bmi.n	80043c8 <_fflush_r+0xc>
 8004404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004406:	f7ff fb8d 	bl	8003b24 <__retarget_lock_release_recursive>
 800440a:	e7dd      	b.n	80043c8 <_fflush_r+0xc>

0800440c <__swhatbuf_r>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	460c      	mov	r4, r1
 8004410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004414:	2900      	cmp	r1, #0
 8004416:	b096      	sub	sp, #88	@ 0x58
 8004418:	4615      	mov	r5, r2
 800441a:	461e      	mov	r6, r3
 800441c:	da0d      	bge.n	800443a <__swhatbuf_r+0x2e>
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004424:	f04f 0100 	mov.w	r1, #0
 8004428:	bf14      	ite	ne
 800442a:	2340      	movne	r3, #64	@ 0x40
 800442c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004430:	2000      	movs	r0, #0
 8004432:	6031      	str	r1, [r6, #0]
 8004434:	602b      	str	r3, [r5, #0]
 8004436:	b016      	add	sp, #88	@ 0x58
 8004438:	bd70      	pop	{r4, r5, r6, pc}
 800443a:	466a      	mov	r2, sp
 800443c:	f000 f848 	bl	80044d0 <_fstat_r>
 8004440:	2800      	cmp	r0, #0
 8004442:	dbec      	blt.n	800441e <__swhatbuf_r+0x12>
 8004444:	9901      	ldr	r1, [sp, #4]
 8004446:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800444a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800444e:	4259      	negs	r1, r3
 8004450:	4159      	adcs	r1, r3
 8004452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004456:	e7eb      	b.n	8004430 <__swhatbuf_r+0x24>

08004458 <__smakebuf_r>:
 8004458:	898b      	ldrh	r3, [r1, #12]
 800445a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800445c:	079d      	lsls	r5, r3, #30
 800445e:	4606      	mov	r6, r0
 8004460:	460c      	mov	r4, r1
 8004462:	d507      	bpl.n	8004474 <__smakebuf_r+0x1c>
 8004464:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	6123      	str	r3, [r4, #16]
 800446c:	2301      	movs	r3, #1
 800446e:	6163      	str	r3, [r4, #20]
 8004470:	b003      	add	sp, #12
 8004472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004474:	ab01      	add	r3, sp, #4
 8004476:	466a      	mov	r2, sp
 8004478:	f7ff ffc8 	bl	800440c <__swhatbuf_r>
 800447c:	9f00      	ldr	r7, [sp, #0]
 800447e:	4605      	mov	r5, r0
 8004480:	4639      	mov	r1, r7
 8004482:	4630      	mov	r0, r6
 8004484:	f7ff fbbc 	bl	8003c00 <_malloc_r>
 8004488:	b948      	cbnz	r0, 800449e <__smakebuf_r+0x46>
 800448a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800448e:	059a      	lsls	r2, r3, #22
 8004490:	d4ee      	bmi.n	8004470 <__smakebuf_r+0x18>
 8004492:	f023 0303 	bic.w	r3, r3, #3
 8004496:	f043 0302 	orr.w	r3, r3, #2
 800449a:	81a3      	strh	r3, [r4, #12]
 800449c:	e7e2      	b.n	8004464 <__smakebuf_r+0xc>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	6020      	str	r0, [r4, #0]
 80044a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044a6:	81a3      	strh	r3, [r4, #12]
 80044a8:	9b01      	ldr	r3, [sp, #4]
 80044aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80044ae:	b15b      	cbz	r3, 80044c8 <__smakebuf_r+0x70>
 80044b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044b4:	4630      	mov	r0, r6
 80044b6:	f000 f81d 	bl	80044f4 <_isatty_r>
 80044ba:	b128      	cbz	r0, 80044c8 <__smakebuf_r+0x70>
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	f023 0303 	bic.w	r3, r3, #3
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	81a3      	strh	r3, [r4, #12]
 80044c8:	89a3      	ldrh	r3, [r4, #12]
 80044ca:	431d      	orrs	r5, r3
 80044cc:	81a5      	strh	r5, [r4, #12]
 80044ce:	e7cf      	b.n	8004470 <__smakebuf_r+0x18>

080044d0 <_fstat_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	4d07      	ldr	r5, [pc, #28]	@ (80044f0 <_fstat_r+0x20>)
 80044d4:	2300      	movs	r3, #0
 80044d6:	4604      	mov	r4, r0
 80044d8:	4608      	mov	r0, r1
 80044da:	4611      	mov	r1, r2
 80044dc:	602b      	str	r3, [r5, #0]
 80044de:	f7fc fbaf 	bl	8000c40 <_fstat>
 80044e2:	1c43      	adds	r3, r0, #1
 80044e4:	d102      	bne.n	80044ec <_fstat_r+0x1c>
 80044e6:	682b      	ldr	r3, [r5, #0]
 80044e8:	b103      	cbz	r3, 80044ec <_fstat_r+0x1c>
 80044ea:	6023      	str	r3, [r4, #0]
 80044ec:	bd38      	pop	{r3, r4, r5, pc}
 80044ee:	bf00      	nop
 80044f0:	20000264 	.word	0x20000264

080044f4 <_isatty_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	4d06      	ldr	r5, [pc, #24]	@ (8004510 <_isatty_r+0x1c>)
 80044f8:	2300      	movs	r3, #0
 80044fa:	4604      	mov	r4, r0
 80044fc:	4608      	mov	r0, r1
 80044fe:	602b      	str	r3, [r5, #0]
 8004500:	f7fc fbae 	bl	8000c60 <_isatty>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d102      	bne.n	800450e <_isatty_r+0x1a>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	b103      	cbz	r3, 800450e <_isatty_r+0x1a>
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	bd38      	pop	{r3, r4, r5, pc}
 8004510:	20000264 	.word	0x20000264

08004514 <_sbrk_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4d06      	ldr	r5, [pc, #24]	@ (8004530 <_sbrk_r+0x1c>)
 8004518:	2300      	movs	r3, #0
 800451a:	4604      	mov	r4, r0
 800451c:	4608      	mov	r0, r1
 800451e:	602b      	str	r3, [r5, #0]
 8004520:	f7fc fbb6 	bl	8000c90 <_sbrk>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d102      	bne.n	800452e <_sbrk_r+0x1a>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	b103      	cbz	r3, 800452e <_sbrk_r+0x1a>
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	bd38      	pop	{r3, r4, r5, pc}
 8004530:	20000264 	.word	0x20000264

08004534 <_init>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	bf00      	nop
 8004538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453a:	bc08      	pop	{r3}
 800453c:	469e      	mov	lr, r3
 800453e:	4770      	bx	lr

08004540 <_fini>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr
